
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  username: 'username',
  name: 'name',
  hashedPassword: 'hashedPassword',
  salt: 'salt',
  resetToken: 'resetToken',
  resetTokenExpiresAt: 'resetTokenExpiresAt',
  roles: 'roles',
  userSettingId: 'userSettingId',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserSettingScalarFieldEnum = makeEnum({
  id: 'id',
  bio: 'bio',
  theme: 'theme',
  languageId: 'languageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.LanguageScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.WordScalarFieldEnum = makeEnum({
  id: 'id',
  word: 'word',
  definition: 'definition',
  example: 'example',
  synonym: 'synonym',
  size: 'size',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  wordBankId: 'wordBankId'
});

exports.Prisma.WordBankScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  languageId: 'languageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.GameScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  tries: 'tries',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  correct: 'correct',
  duration: 'duration',
  userId: 'userId',
  wordId: 'wordId',
  wordsBankId: 'wordsBankId',
  statisticsId: 'statisticsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.LetterScalarFieldEnum = makeEnum({
  id: 'id',
  letter: 'letter',
  tryRowId: 'tryRowId',
  createdAt: 'createdAt',
  modifiedAt: 'modifiedAt'
});

exports.Prisma.TryRowScalarFieldEnum = makeEnum({
  id: 'id',
  gameId: 'gameId',
  tries: 'tries',
  rowSize: 'rowSize',
  correct: 'correct',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.StatisticScalarFieldEnum = makeEnum({
  id: 'id',
  gamePlayed: 'gamePlayed',
  gameWon: 'gameWon',
  gameLost: 'gameLost',
  streak: 'streak',
  average: 'average',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  UserSetting: 'UserSetting',
  Language: 'Language',
  Word: 'Word',
  WordBank: 'WordBank',
  Game: 'Game',
  Letter: 'Letter',
  TryRow: 'TryRow',
  Statistic: 'Statistic'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
