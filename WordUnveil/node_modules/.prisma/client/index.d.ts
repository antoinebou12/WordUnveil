
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  username: string
  name: string | null
  hashedPassword: string
  salt: string
  resetToken: string | null
  resetTokenExpiresAt: Date | null
  roles: string
  userSettingId: string
  lastLogin: Date | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model UserSetting
 * 
 */
export type UserSetting = {
  id: string
  bio: string | null
  theme: string | null
  languageId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Language
 * 
 */
export type Language = {
  id: string
  name: string
  code: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Word
 * 
 */
export type Word = {
  id: string
  word: string
  definition: string | null
  example: string | null
  synonym: string | null
  size: number
  source: string | null
  createdAt: Date
  updatedAt: Date
  wordBankId: string | null
}

/**
 * Model WordBank
 * 
 */
export type WordBank = {
  id: string
  name: string
  languageId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Game
 * 
 */
export type Game = {
  id: string
  name: string
  tries: number
  startedAt: Date
  finishedAt: Date | null
  correct: boolean
  duration: number
  userId: string
  wordId: string
  wordsBankId: string
  statisticsId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Letter
 * 
 */
export type Letter = {
  id: string
  letter: string
  tryRowId: string
  createdAt: Date
  modifiedAt: Date
}

/**
 * Model TryRow
 * 
 */
export type TryRow = {
  id: string
  gameId: string
  tries: number
  rowSize: number
  correct: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Statistic
 * 
 */
export type Statistic = {
  id: string
  gamePlayed: number
  gameWon: number
  gameLost: number
  streak: number
  average: number
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userSetting`: Exposes CRUD operations for the **UserSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSetting.findMany()
    * ```
    */
  get userSetting(): Prisma.UserSettingDelegate<GlobalReject>;

  /**
   * `prisma.language`: Exposes CRUD operations for the **Language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): Prisma.LanguageDelegate<GlobalReject>;

  /**
   * `prisma.word`: Exposes CRUD operations for the **Word** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Words
    * const words = await prisma.word.findMany()
    * ```
    */
  get word(): Prisma.WordDelegate<GlobalReject>;

  /**
   * `prisma.wordBank`: Exposes CRUD operations for the **WordBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WordBanks
    * const wordBanks = await prisma.wordBank.findMany()
    * ```
    */
  get wordBank(): Prisma.WordBankDelegate<GlobalReject>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<GlobalReject>;

  /**
   * `prisma.letter`: Exposes CRUD operations for the **Letter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Letters
    * const letters = await prisma.letter.findMany()
    * ```
    */
  get letter(): Prisma.LetterDelegate<GlobalReject>;

  /**
   * `prisma.tryRow`: Exposes CRUD operations for the **TryRow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TryRows
    * const tryRows = await prisma.tryRow.findMany()
    * ```
    */
  get tryRow(): Prisma.TryRowDelegate<GlobalReject>;

  /**
   * `prisma.statistic`: Exposes CRUD operations for the **Statistic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statistics
    * const statistics = await prisma.statistic.findMany()
    * ```
    */
  get statistic(): Prisma.StatisticDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    UserSetting: 'UserSetting',
    Language: 'Language',
    Word: 'Word',
    WordBank: 'WordBank',
    Game: 'Game',
    Letter: 'Letter',
    TryRow: 'TryRow',
    Statistic: 'Statistic'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Game: number
    Statistics: number
  }

  export type UserCountOutputTypeSelect = {
    Game?: boolean
    Statistics?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type UserSettingCountOutputType
   */


  export type UserSettingCountOutputType = {
    User: number
  }

  export type UserSettingCountOutputTypeSelect = {
    User?: boolean
  }

  export type UserSettingCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserSettingCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserSettingCountOutputType
    : S extends undefined
    ? never
    : S extends UserSettingCountOutputTypeArgs
    ?'include' extends U
    ? UserSettingCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserSettingCountOutputType ? UserSettingCountOutputType[P] : never
  } 
    : UserSettingCountOutputType
  : UserSettingCountOutputType




  // Custom InputTypes

  /**
   * UserSettingCountOutputType without action
   */
  export type UserSettingCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserSettingCountOutputType
     * 
    **/
    select?: UserSettingCountOutputTypeSelect | null
  }



  /**
   * Count Type LanguageCountOutputType
   */


  export type LanguageCountOutputType = {
    UserSettings: number
    Word: number
    WordBank: number
  }

  export type LanguageCountOutputTypeSelect = {
    UserSettings?: boolean
    Word?: boolean
    WordBank?: boolean
  }

  export type LanguageCountOutputTypeGetPayload<
    S extends boolean | null | undefined | LanguageCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? LanguageCountOutputType
    : S extends undefined
    ? never
    : S extends LanguageCountOutputTypeArgs
    ?'include' extends U
    ? LanguageCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LanguageCountOutputType ? LanguageCountOutputType[P] : never
  } 
    : LanguageCountOutputType
  : LanguageCountOutputType




  // Custom InputTypes

  /**
   * LanguageCountOutputType without action
   */
  export type LanguageCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LanguageCountOutputType
     * 
    **/
    select?: LanguageCountOutputTypeSelect | null
  }



  /**
   * Count Type WordCountOutputType
   */


  export type WordCountOutputType = {
    Language: number
    Game: number
  }

  export type WordCountOutputTypeSelect = {
    Language?: boolean
    Game?: boolean
  }

  export type WordCountOutputTypeGetPayload<
    S extends boolean | null | undefined | WordCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? WordCountOutputType
    : S extends undefined
    ? never
    : S extends WordCountOutputTypeArgs
    ?'include' extends U
    ? WordCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof WordCountOutputType ? WordCountOutputType[P] : never
  } 
    : WordCountOutputType
  : WordCountOutputType




  // Custom InputTypes

  /**
   * WordCountOutputType without action
   */
  export type WordCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WordCountOutputType
     * 
    **/
    select?: WordCountOutputTypeSelect | null
  }



  /**
   * Count Type WordBankCountOutputType
   */


  export type WordBankCountOutputType = {
    Word: number
    Game: number
  }

  export type WordBankCountOutputTypeSelect = {
    Word?: boolean
    Game?: boolean
  }

  export type WordBankCountOutputTypeGetPayload<
    S extends boolean | null | undefined | WordBankCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? WordBankCountOutputType
    : S extends undefined
    ? never
    : S extends WordBankCountOutputTypeArgs
    ?'include' extends U
    ? WordBankCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof WordBankCountOutputType ? WordBankCountOutputType[P] : never
  } 
    : WordBankCountOutputType
  : WordBankCountOutputType




  // Custom InputTypes

  /**
   * WordBankCountOutputType without action
   */
  export type WordBankCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WordBankCountOutputType
     * 
    **/
    select?: WordBankCountOutputTypeSelect | null
  }



  /**
   * Count Type GameCountOutputType
   */


  export type GameCountOutputType = {
    tryRows: number
  }

  export type GameCountOutputTypeSelect = {
    tryRows?: boolean
  }

  export type GameCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GameCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GameCountOutputType
    : S extends undefined
    ? never
    : S extends GameCountOutputTypeArgs
    ?'include' extends U
    ? GameCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GameCountOutputType ? GameCountOutputType[P] : never
  } 
    : GameCountOutputType
  : GameCountOutputType




  // Custom InputTypes

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     * 
    **/
    select?: GameCountOutputTypeSelect | null
  }



  /**
   * Count Type TryRowCountOutputType
   */


  export type TryRowCountOutputType = {
    letters: number
  }

  export type TryRowCountOutputTypeSelect = {
    letters?: boolean
  }

  export type TryRowCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TryRowCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TryRowCountOutputType
    : S extends undefined
    ? never
    : S extends TryRowCountOutputTypeArgs
    ?'include' extends U
    ? TryRowCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TryRowCountOutputType ? TryRowCountOutputType[P] : never
  } 
    : TryRowCountOutputType
  : TryRowCountOutputType




  // Custom InputTypes

  /**
   * TryRowCountOutputType without action
   */
  export type TryRowCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TryRowCountOutputType
     * 
    **/
    select?: TryRowCountOutputTypeSelect | null
  }



  /**
   * Count Type StatisticCountOutputType
   */


  export type StatisticCountOutputType = {
    Game: number
  }

  export type StatisticCountOutputTypeSelect = {
    Game?: boolean
  }

  export type StatisticCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StatisticCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StatisticCountOutputType
    : S extends undefined
    ? never
    : S extends StatisticCountOutputTypeArgs
    ?'include' extends U
    ? StatisticCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StatisticCountOutputType ? StatisticCountOutputType[P] : never
  } 
    : StatisticCountOutputType
  : StatisticCountOutputType




  // Custom InputTypes

  /**
   * StatisticCountOutputType without action
   */
  export type StatisticCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StatisticCountOutputType
     * 
    **/
    select?: StatisticCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    name: string | null
    hashedPassword: string | null
    salt: string | null
    resetToken: string | null
    resetTokenExpiresAt: Date | null
    roles: string | null
    userSettingId: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    name: string | null
    hashedPassword: string | null
    salt: string | null
    resetToken: string | null
    resetTokenExpiresAt: Date | null
    roles: string | null
    userSettingId: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    name: number
    hashedPassword: number
    salt: number
    resetToken: number
    resetTokenExpiresAt: number
    roles: number
    userSettingId: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    hashedPassword?: true
    salt?: true
    resetToken?: true
    resetTokenExpiresAt?: true
    roles?: true
    userSettingId?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    hashedPassword?: true
    salt?: true
    resetToken?: true
    resetTokenExpiresAt?: true
    roles?: true
    userSettingId?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    hashedPassword?: true
    salt?: true
    resetToken?: true
    resetTokenExpiresAt?: true
    roles?: true
    userSettingId?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    name: string | null
    hashedPassword: string
    salt: string
    resetToken: string | null
    resetTokenExpiresAt: Date | null
    roles: string
    userSettingId: string
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    username?: boolean
    name?: boolean
    hashedPassword?: boolean
    salt?: boolean
    resetToken?: boolean
    resetTokenExpiresAt?: boolean
    roles?: boolean
    userSetting?: boolean | UserSettingArgs
    userSettingId?: boolean
    Game?: boolean | GameFindManyArgs
    Statistics?: boolean | StatisticFindManyArgs
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    userSetting?: boolean | UserSettingArgs
    Game?: boolean | GameFindManyArgs
    Statistics?: boolean | StatisticFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'userSetting' ? UserSettingGetPayload<S['include'][P]> :
        P extends 'Game' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends 'Statistics' ? Array < StatisticGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'userSetting' ? UserSettingGetPayload<S['select'][P]> :
        P extends 'Game' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends 'Statistics' ? Array < StatisticGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userSetting<T extends UserSettingArgs = {}>(args?: Subset<T, UserSettingArgs>): CheckSelect<T, Prisma__UserSettingClient<UserSetting | null >, Prisma__UserSettingClient<UserSettingGetPayload<T> | null >>;

    Game<T extends GameFindManyArgs = {}>(args?: Subset<T, GameFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Game>>, PrismaPromise<Array<GameGetPayload<T>>>>;

    Statistics<T extends StatisticFindManyArgs = {}>(args?: Subset<T, StatisticFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Statistic>>, PrismaPromise<Array<StatisticGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserSetting
   */


  export type AggregateUserSetting = {
    _count: UserSettingCountAggregateOutputType | null
    _min: UserSettingMinAggregateOutputType | null
    _max: UserSettingMaxAggregateOutputType | null
  }

  export type UserSettingMinAggregateOutputType = {
    id: string | null
    bio: string | null
    theme: string | null
    languageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingMaxAggregateOutputType = {
    id: string | null
    bio: string | null
    theme: string | null
    languageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingCountAggregateOutputType = {
    id: number
    bio: number
    theme: number
    languageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSettingMinAggregateInputType = {
    id?: true
    bio?: true
    theme?: true
    languageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingMaxAggregateInputType = {
    id?: true
    bio?: true
    theme?: true
    languageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingCountAggregateInputType = {
    id?: true
    bio?: true
    theme?: true
    languageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSettingAggregateArgs = {
    /**
     * Filter which UserSetting to aggregate.
     * 
    **/
    where?: UserSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserSettingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingMaxAggregateInputType
  }

  export type GetUserSettingAggregateType<T extends UserSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSetting[P]>
      : GetScalarType<T[P], AggregateUserSetting[P]>
  }




  export type UserSettingGroupByArgs = {
    where?: UserSettingWhereInput
    orderBy?: Enumerable<UserSettingOrderByWithAggregationInput>
    by: Array<UserSettingScalarFieldEnum>
    having?: UserSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingCountAggregateInputType | true
    _min?: UserSettingMinAggregateInputType
    _max?: UserSettingMaxAggregateInputType
  }


  export type UserSettingGroupByOutputType = {
    id: string
    bio: string | null
    theme: string | null
    languageId: string
    createdAt: Date
    updatedAt: Date
    _count: UserSettingCountAggregateOutputType | null
    _min: UserSettingMinAggregateOutputType | null
    _max: UserSettingMaxAggregateOutputType | null
  }

  type GetUserSettingGroupByPayload<T extends UserSettingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingSelect = {
    id?: boolean
    bio?: boolean
    theme?: boolean
    Language?: boolean | LanguageArgs
    User?: boolean | UserFindManyArgs
    languageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserSettingCountOutputTypeArgs
  }

  export type UserSettingInclude = {
    Language?: boolean | LanguageArgs
    User?: boolean | UserFindManyArgs
    _count?: boolean | UserSettingCountOutputTypeArgs
  }

  export type UserSettingGetPayload<
    S extends boolean | null | undefined | UserSettingArgs,
    U = keyof S
      > = S extends true
        ? UserSetting
    : S extends undefined
    ? never
    : S extends UserSettingArgs | UserSettingFindManyArgs
    ?'include' extends U
    ? UserSetting  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Language' ? LanguageGetPayload<S['include'][P]> :
        P extends 'User' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserSettingCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Language' ? LanguageGetPayload<S['select'][P]> :
        P extends 'User' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserSettingCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof UserSetting ? UserSetting[P] : never
  } 
    : UserSetting
  : UserSetting


  type UserSettingCountArgs = Merge<
    Omit<UserSettingFindManyArgs, 'select' | 'include'> & {
      select?: UserSettingCountAggregateInputType | true
    }
  >

  export interface UserSettingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserSetting that matches the filter.
     * @param {UserSettingFindUniqueArgs} args - Arguments to find a UserSetting
     * @example
     * // Get one UserSetting
     * const userSetting = await prisma.userSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserSettingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserSettingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserSetting'> extends True ? CheckSelect<T, Prisma__UserSettingClient<UserSetting>, Prisma__UserSettingClient<UserSettingGetPayload<T>>> : CheckSelect<T, Prisma__UserSettingClient<UserSetting | null >, Prisma__UserSettingClient<UserSettingGetPayload<T> | null >>

    /**
     * Find the first UserSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingFindFirstArgs} args - Arguments to find a UserSetting
     * @example
     * // Get one UserSetting
     * const userSetting = await prisma.userSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserSettingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserSettingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserSetting'> extends True ? CheckSelect<T, Prisma__UserSettingClient<UserSetting>, Prisma__UserSettingClient<UserSettingGetPayload<T>>> : CheckSelect<T, Prisma__UserSettingClient<UserSetting | null >, Prisma__UserSettingClient<UserSettingGetPayload<T> | null >>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSetting.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingWithIdOnly = await prisma.userSetting.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserSettingFindManyArgs>(
      args?: SelectSubset<T, UserSettingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserSetting>>, PrismaPromise<Array<UserSettingGetPayload<T>>>>

    /**
     * Create a UserSetting.
     * @param {UserSettingCreateArgs} args - Arguments to create a UserSetting.
     * @example
     * // Create one UserSetting
     * const UserSetting = await prisma.userSetting.create({
     *   data: {
     *     // ... data to create a UserSetting
     *   }
     * })
     * 
    **/
    create<T extends UserSettingCreateArgs>(
      args: SelectSubset<T, UserSettingCreateArgs>
    ): CheckSelect<T, Prisma__UserSettingClient<UserSetting>, Prisma__UserSettingClient<UserSettingGetPayload<T>>>

    /**
     * Create many UserSettings.
     *     @param {UserSettingCreateManyArgs} args - Arguments to create many UserSettings.
     *     @example
     *     // Create many UserSettings
     *     const userSetting = await prisma.userSetting.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserSettingCreateManyArgs>(
      args?: SelectSubset<T, UserSettingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserSetting.
     * @param {UserSettingDeleteArgs} args - Arguments to delete one UserSetting.
     * @example
     * // Delete one UserSetting
     * const UserSetting = await prisma.userSetting.delete({
     *   where: {
     *     // ... filter to delete one UserSetting
     *   }
     * })
     * 
    **/
    delete<T extends UserSettingDeleteArgs>(
      args: SelectSubset<T, UserSettingDeleteArgs>
    ): CheckSelect<T, Prisma__UserSettingClient<UserSetting>, Prisma__UserSettingClient<UserSettingGetPayload<T>>>

    /**
     * Update one UserSetting.
     * @param {UserSettingUpdateArgs} args - Arguments to update one UserSetting.
     * @example
     * // Update one UserSetting
     * const userSetting = await prisma.userSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserSettingUpdateArgs>(
      args: SelectSubset<T, UserSettingUpdateArgs>
    ): CheckSelect<T, Prisma__UserSettingClient<UserSetting>, Prisma__UserSettingClient<UserSettingGetPayload<T>>>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserSettingDeleteManyArgs>(
      args?: SelectSubset<T, UserSettingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSetting = await prisma.userSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserSettingUpdateManyArgs>(
      args: SelectSubset<T, UserSettingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSetting.
     * @param {UserSettingUpsertArgs} args - Arguments to update or create a UserSetting.
     * @example
     * // Update or create a UserSetting
     * const userSetting = await prisma.userSetting.upsert({
     *   create: {
     *     // ... data to create a UserSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSetting we want to update
     *   }
     * })
    **/
    upsert<T extends UserSettingUpsertArgs>(
      args: SelectSubset<T, UserSettingUpsertArgs>
    ): CheckSelect<T, Prisma__UserSettingClient<UserSetting>, Prisma__UserSettingClient<UserSettingGetPayload<T>>>

    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSetting.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingCountArgs>(
      args?: Subset<T, UserSettingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingAggregateArgs>(args: Subset<T, UserSettingAggregateArgs>): PrismaPromise<GetUserSettingAggregateType<T>>

    /**
     * Group by UserSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserSettingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Language<T extends LanguageArgs = {}>(args?: Subset<T, LanguageArgs>): CheckSelect<T, Prisma__LanguageClient<Language | null >, Prisma__LanguageClient<LanguageGetPayload<T> | null >>;

    User<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserSetting findUnique
   */
  export type UserSettingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
    /**
     * Throw an Error if a UserSetting can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserSetting to fetch.
     * 
    **/
    where: UserSettingWhereUniqueInput
  }


  /**
   * UserSetting findFirst
   */
  export type UserSettingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
    /**
     * Throw an Error if a UserSetting can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserSetting to fetch.
     * 
    **/
    where?: UserSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserSettingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     * 
    **/
    cursor?: UserSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     * 
    **/
    distinct?: Enumerable<UserSettingScalarFieldEnum>
  }


  /**
   * UserSetting findMany
   */
  export type UserSettingFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
    /**
     * Filter, which UserSettings to fetch.
     * 
    **/
    where?: UserSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserSettingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     * 
    **/
    cursor?: UserSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserSettingScalarFieldEnum>
  }


  /**
   * UserSetting create
   */
  export type UserSettingCreateArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
    /**
     * The data needed to create a UserSetting.
     * 
    **/
    data: XOR<UserSettingCreateInput, UserSettingUncheckedCreateInput>
  }


  /**
   * UserSetting createMany
   */
  export type UserSettingCreateManyArgs = {
    /**
     * The data used to create many UserSettings.
     * 
    **/
    data: Enumerable<UserSettingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserSetting update
   */
  export type UserSettingUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
    /**
     * The data needed to update a UserSetting.
     * 
    **/
    data: XOR<UserSettingUpdateInput, UserSettingUncheckedUpdateInput>
    /**
     * Choose, which UserSetting to update.
     * 
    **/
    where: UserSettingWhereUniqueInput
  }


  /**
   * UserSetting updateMany
   */
  export type UserSettingUpdateManyArgs = {
    /**
     * The data used to update UserSettings.
     * 
    **/
    data: XOR<UserSettingUpdateManyMutationInput, UserSettingUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     * 
    **/
    where?: UserSettingWhereInput
  }


  /**
   * UserSetting upsert
   */
  export type UserSettingUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
    /**
     * The filter to search for the UserSetting to update in case it exists.
     * 
    **/
    where: UserSettingWhereUniqueInput
    /**
     * In case the UserSetting found by the `where` argument doesn't exist, create a new UserSetting with this data.
     * 
    **/
    create: XOR<UserSettingCreateInput, UserSettingUncheckedCreateInput>
    /**
     * In case the UserSetting was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserSettingUpdateInput, UserSettingUncheckedUpdateInput>
  }


  /**
   * UserSetting delete
   */
  export type UserSettingDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
    /**
     * Filter which UserSetting to delete.
     * 
    **/
    where: UserSettingWhereUniqueInput
  }


  /**
   * UserSetting deleteMany
   */
  export type UserSettingDeleteManyArgs = {
    /**
     * Filter which UserSettings to delete
     * 
    **/
    where?: UserSettingWhereInput
  }


  /**
   * UserSetting without action
   */
  export type UserSettingArgs = {
    /**
     * Select specific fields to fetch from the UserSetting
     * 
    **/
    select?: UserSettingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserSettingInclude | null
  }



  /**
   * Model Language
   */


  export type AggregateLanguage = {
    _count: LanguageCountAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  export type LanguageMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguageMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguageCountAggregateOutputType = {
    id: number
    name: number
    code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LanguageMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguageMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguageCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LanguageAggregateArgs = {
    /**
     * Filter which Language to aggregate.
     * 
    **/
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     * 
    **/
    orderBy?: Enumerable<LanguageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageMaxAggregateInputType
  }

  export type GetLanguageAggregateType<T extends LanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguage[P]>
      : GetScalarType<T[P], AggregateLanguage[P]>
  }




  export type LanguageGroupByArgs = {
    where?: LanguageWhereInput
    orderBy?: Enumerable<LanguageOrderByWithAggregationInput>
    by: Array<LanguageScalarFieldEnum>
    having?: LanguageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageCountAggregateInputType | true
    _min?: LanguageMinAggregateInputType
    _max?: LanguageMaxAggregateInputType
  }


  export type LanguageGroupByOutputType = {
    id: string
    name: string
    code: string
    createdAt: Date
    updatedAt: Date
    _count: LanguageCountAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  type GetLanguageGroupByPayload<T extends LanguageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageGroupByOutputType[P]>
        }
      >
    >


  export type LanguageSelect = {
    id?: boolean
    name?: boolean
    code?: boolean
    UserSettings?: boolean | UserSettingFindManyArgs
    Word?: boolean | WordFindManyArgs
    WordBank?: boolean | WordBankFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | LanguageCountOutputTypeArgs
  }

  export type LanguageInclude = {
    UserSettings?: boolean | UserSettingFindManyArgs
    Word?: boolean | WordFindManyArgs
    WordBank?: boolean | WordBankFindManyArgs
    _count?: boolean | LanguageCountOutputTypeArgs
  }

  export type LanguageGetPayload<
    S extends boolean | null | undefined | LanguageArgs,
    U = keyof S
      > = S extends true
        ? Language
    : S extends undefined
    ? never
    : S extends LanguageArgs | LanguageFindManyArgs
    ?'include' extends U
    ? Language  & {
    [P in TrueKeys<S['include']>]:
        P extends 'UserSettings' ? Array < UserSettingGetPayload<S['include'][P]>>  :
        P extends 'Word' ? Array < WordGetPayload<S['include'][P]>>  :
        P extends 'WordBank' ? Array < WordBankGetPayload<S['include'][P]>>  :
        P extends '_count' ? LanguageCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'UserSettings' ? Array < UserSettingGetPayload<S['select'][P]>>  :
        P extends 'Word' ? Array < WordGetPayload<S['select'][P]>>  :
        P extends 'WordBank' ? Array < WordBankGetPayload<S['select'][P]>>  :
        P extends '_count' ? LanguageCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Language ? Language[P] : never
  } 
    : Language
  : Language


  type LanguageCountArgs = Merge<
    Omit<LanguageFindManyArgs, 'select' | 'include'> & {
      select?: LanguageCountAggregateInputType | true
    }
  >

  export interface LanguageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Language that matches the filter.
     * @param {LanguageFindUniqueArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LanguageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LanguageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Language'> extends True ? CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>> : CheckSelect<T, Prisma__LanguageClient<Language | null >, Prisma__LanguageClient<LanguageGetPayload<T> | null >>

    /**
     * Find the first Language that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LanguageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LanguageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Language'> extends True ? CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>> : CheckSelect<T, Prisma__LanguageClient<Language | null >, Prisma__LanguageClient<LanguageGetPayload<T> | null >>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.language.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.language.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageWithIdOnly = await prisma.language.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LanguageFindManyArgs>(
      args?: SelectSubset<T, LanguageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Language>>, PrismaPromise<Array<LanguageGetPayload<T>>>>

    /**
     * Create a Language.
     * @param {LanguageCreateArgs} args - Arguments to create a Language.
     * @example
     * // Create one Language
     * const Language = await prisma.language.create({
     *   data: {
     *     // ... data to create a Language
     *   }
     * })
     * 
    **/
    create<T extends LanguageCreateArgs>(
      args: SelectSubset<T, LanguageCreateArgs>
    ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>

    /**
     * Create many Languages.
     *     @param {LanguageCreateManyArgs} args - Arguments to create many Languages.
     *     @example
     *     // Create many Languages
     *     const language = await prisma.language.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LanguageCreateManyArgs>(
      args?: SelectSubset<T, LanguageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Language.
     * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
     * @example
     * // Delete one Language
     * const Language = await prisma.language.delete({
     *   where: {
     *     // ... filter to delete one Language
     *   }
     * })
     * 
    **/
    delete<T extends LanguageDeleteArgs>(
      args: SelectSubset<T, LanguageDeleteArgs>
    ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>

    /**
     * Update one Language.
     * @param {LanguageUpdateArgs} args - Arguments to update one Language.
     * @example
     * // Update one Language
     * const language = await prisma.language.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LanguageUpdateArgs>(
      args: SelectSubset<T, LanguageUpdateArgs>
    ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>

    /**
     * Delete zero or more Languages.
     * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.language.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LanguageDeleteManyArgs>(
      args?: SelectSubset<T, LanguageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LanguageUpdateManyArgs>(
      args: SelectSubset<T, LanguageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Language.
     * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
     * @example
     * // Update or create a Language
     * const language = await prisma.language.upsert({
     *   create: {
     *     // ... data to create a Language
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Language we want to update
     *   }
     * })
    **/
    upsert<T extends LanguageUpsertArgs>(
      args: SelectSubset<T, LanguageUpsertArgs>
    ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>

    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.language.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguageCountArgs>(
      args?: Subset<T, LanguageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageAggregateArgs>(args: Subset<T, LanguageAggregateArgs>): PrismaPromise<GetLanguageAggregateType<T>>

    /**
     * Group by Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageGroupByArgs['orderBy'] }
        : { orderBy?: LanguageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Language.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LanguageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    UserSettings<T extends UserSettingFindManyArgs = {}>(args?: Subset<T, UserSettingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserSetting>>, PrismaPromise<Array<UserSettingGetPayload<T>>>>;

    Word<T extends WordFindManyArgs = {}>(args?: Subset<T, WordFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Word>>, PrismaPromise<Array<WordGetPayload<T>>>>;

    WordBank<T extends WordBankFindManyArgs = {}>(args?: Subset<T, WordBankFindManyArgs>): CheckSelect<T, PrismaPromise<Array<WordBank>>, PrismaPromise<Array<WordBankGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Language findUnique
   */
  export type LanguageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
    /**
     * Throw an Error if a Language can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Language to fetch.
     * 
    **/
    where: LanguageWhereUniqueInput
  }


  /**
   * Language findFirst
   */
  export type LanguageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
    /**
     * Throw an Error if a Language can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Language to fetch.
     * 
    **/
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     * 
    **/
    orderBy?: Enumerable<LanguageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     * 
    **/
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     * 
    **/
    distinct?: Enumerable<LanguageScalarFieldEnum>
  }


  /**
   * Language findMany
   */
  export type LanguageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
    /**
     * Filter, which Languages to fetch.
     * 
    **/
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     * 
    **/
    orderBy?: Enumerable<LanguageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     * 
    **/
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LanguageScalarFieldEnum>
  }


  /**
   * Language create
   */
  export type LanguageCreateArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
    /**
     * The data needed to create a Language.
     * 
    **/
    data: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
  }


  /**
   * Language createMany
   */
  export type LanguageCreateManyArgs = {
    /**
     * The data used to create many Languages.
     * 
    **/
    data: Enumerable<LanguageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Language update
   */
  export type LanguageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
    /**
     * The data needed to update a Language.
     * 
    **/
    data: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
    /**
     * Choose, which Language to update.
     * 
    **/
    where: LanguageWhereUniqueInput
  }


  /**
   * Language updateMany
   */
  export type LanguageUpdateManyArgs = {
    /**
     * The data used to update Languages.
     * 
    **/
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     * 
    **/
    where?: LanguageWhereInput
  }


  /**
   * Language upsert
   */
  export type LanguageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
    /**
     * The filter to search for the Language to update in case it exists.
     * 
    **/
    where: LanguageWhereUniqueInput
    /**
     * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
     * 
    **/
    create: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
    /**
     * In case the Language was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
  }


  /**
   * Language delete
   */
  export type LanguageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
    /**
     * Filter which Language to delete.
     * 
    **/
    where: LanguageWhereUniqueInput
  }


  /**
   * Language deleteMany
   */
  export type LanguageDeleteManyArgs = {
    /**
     * Filter which Languages to delete
     * 
    **/
    where?: LanguageWhereInput
  }


  /**
   * Language without action
   */
  export type LanguageArgs = {
    /**
     * Select specific fields to fetch from the Language
     * 
    **/
    select?: LanguageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LanguageInclude | null
  }



  /**
   * Model Word
   */


  export type AggregateWord = {
    _count: WordCountAggregateOutputType | null
    _avg: WordAvgAggregateOutputType | null
    _sum: WordSumAggregateOutputType | null
    _min: WordMinAggregateOutputType | null
    _max: WordMaxAggregateOutputType | null
  }

  export type WordAvgAggregateOutputType = {
    size: number | null
  }

  export type WordSumAggregateOutputType = {
    size: number | null
  }

  export type WordMinAggregateOutputType = {
    id: string | null
    word: string | null
    definition: string | null
    example: string | null
    synonym: string | null
    size: number | null
    source: string | null
    createdAt: Date | null
    updatedAt: Date | null
    wordBankId: string | null
  }

  export type WordMaxAggregateOutputType = {
    id: string | null
    word: string | null
    definition: string | null
    example: string | null
    synonym: string | null
    size: number | null
    source: string | null
    createdAt: Date | null
    updatedAt: Date | null
    wordBankId: string | null
  }

  export type WordCountAggregateOutputType = {
    id: number
    word: number
    definition: number
    example: number
    synonym: number
    size: number
    source: number
    createdAt: number
    updatedAt: number
    wordBankId: number
    _all: number
  }


  export type WordAvgAggregateInputType = {
    size?: true
  }

  export type WordSumAggregateInputType = {
    size?: true
  }

  export type WordMinAggregateInputType = {
    id?: true
    word?: true
    definition?: true
    example?: true
    synonym?: true
    size?: true
    source?: true
    createdAt?: true
    updatedAt?: true
    wordBankId?: true
  }

  export type WordMaxAggregateInputType = {
    id?: true
    word?: true
    definition?: true
    example?: true
    synonym?: true
    size?: true
    source?: true
    createdAt?: true
    updatedAt?: true
    wordBankId?: true
  }

  export type WordCountAggregateInputType = {
    id?: true
    word?: true
    definition?: true
    example?: true
    synonym?: true
    size?: true
    source?: true
    createdAt?: true
    updatedAt?: true
    wordBankId?: true
    _all?: true
  }

  export type WordAggregateArgs = {
    /**
     * Filter which Word to aggregate.
     * 
    **/
    where?: WordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Words to fetch.
     * 
    **/
    orderBy?: Enumerable<WordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Words from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Words.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Words
    **/
    _count?: true | WordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WordMaxAggregateInputType
  }

  export type GetWordAggregateType<T extends WordAggregateArgs> = {
        [P in keyof T & keyof AggregateWord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWord[P]>
      : GetScalarType<T[P], AggregateWord[P]>
  }




  export type WordGroupByArgs = {
    where?: WordWhereInput
    orderBy?: Enumerable<WordOrderByWithAggregationInput>
    by: Array<WordScalarFieldEnum>
    having?: WordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WordCountAggregateInputType | true
    _avg?: WordAvgAggregateInputType
    _sum?: WordSumAggregateInputType
    _min?: WordMinAggregateInputType
    _max?: WordMaxAggregateInputType
  }


  export type WordGroupByOutputType = {
    id: string
    word: string
    definition: string | null
    example: string | null
    synonym: string | null
    size: number
    source: string | null
    createdAt: Date
    updatedAt: Date
    wordBankId: string | null
    _count: WordCountAggregateOutputType | null
    _avg: WordAvgAggregateOutputType | null
    _sum: WordSumAggregateOutputType | null
    _min: WordMinAggregateOutputType | null
    _max: WordMaxAggregateOutputType | null
  }

  type GetWordGroupByPayload<T extends WordGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WordGroupByOutputType[P]>
            : GetScalarType<T[P], WordGroupByOutputType[P]>
        }
      >
    >


  export type WordSelect = {
    id?: boolean
    word?: boolean
    definition?: boolean
    example?: boolean
    synonym?: boolean
    size?: boolean
    source?: boolean
    Language?: boolean | LanguageFindManyArgs
    Game?: boolean | GameFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    WordBank?: boolean | WordBankArgs
    wordBankId?: boolean
    _count?: boolean | WordCountOutputTypeArgs
  }

  export type WordInclude = {
    Language?: boolean | LanguageFindManyArgs
    Game?: boolean | GameFindManyArgs
    WordBank?: boolean | WordBankArgs
    _count?: boolean | WordCountOutputTypeArgs
  }

  export type WordGetPayload<
    S extends boolean | null | undefined | WordArgs,
    U = keyof S
      > = S extends true
        ? Word
    : S extends undefined
    ? never
    : S extends WordArgs | WordFindManyArgs
    ?'include' extends U
    ? Word  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Language' ? Array < LanguageGetPayload<S['include'][P]>>  :
        P extends 'Game' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends 'WordBank' ? WordBankGetPayload<S['include'][P]> | null :
        P extends '_count' ? WordCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Language' ? Array < LanguageGetPayload<S['select'][P]>>  :
        P extends 'Game' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends 'WordBank' ? WordBankGetPayload<S['select'][P]> | null :
        P extends '_count' ? WordCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Word ? Word[P] : never
  } 
    : Word
  : Word


  type WordCountArgs = Merge<
    Omit<WordFindManyArgs, 'select' | 'include'> & {
      select?: WordCountAggregateInputType | true
    }
  >

  export interface WordDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Word that matches the filter.
     * @param {WordFindUniqueArgs} args - Arguments to find a Word
     * @example
     * // Get one Word
     * const word = await prisma.word.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Word'> extends True ? CheckSelect<T, Prisma__WordClient<Word>, Prisma__WordClient<WordGetPayload<T>>> : CheckSelect<T, Prisma__WordClient<Word | null >, Prisma__WordClient<WordGetPayload<T> | null >>

    /**
     * Find the first Word that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordFindFirstArgs} args - Arguments to find a Word
     * @example
     * // Get one Word
     * const word = await prisma.word.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Word'> extends True ? CheckSelect<T, Prisma__WordClient<Word>, Prisma__WordClient<WordGetPayload<T>>> : CheckSelect<T, Prisma__WordClient<Word | null >, Prisma__WordClient<WordGetPayload<T> | null >>

    /**
     * Find zero or more Words that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Words
     * const words = await prisma.word.findMany()
     * 
     * // Get first 10 Words
     * const words = await prisma.word.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wordWithIdOnly = await prisma.word.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WordFindManyArgs>(
      args?: SelectSubset<T, WordFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Word>>, PrismaPromise<Array<WordGetPayload<T>>>>

    /**
     * Create a Word.
     * @param {WordCreateArgs} args - Arguments to create a Word.
     * @example
     * // Create one Word
     * const Word = await prisma.word.create({
     *   data: {
     *     // ... data to create a Word
     *   }
     * })
     * 
    **/
    create<T extends WordCreateArgs>(
      args: SelectSubset<T, WordCreateArgs>
    ): CheckSelect<T, Prisma__WordClient<Word>, Prisma__WordClient<WordGetPayload<T>>>

    /**
     * Create many Words.
     *     @param {WordCreateManyArgs} args - Arguments to create many Words.
     *     @example
     *     // Create many Words
     *     const word = await prisma.word.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WordCreateManyArgs>(
      args?: SelectSubset<T, WordCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Word.
     * @param {WordDeleteArgs} args - Arguments to delete one Word.
     * @example
     * // Delete one Word
     * const Word = await prisma.word.delete({
     *   where: {
     *     // ... filter to delete one Word
     *   }
     * })
     * 
    **/
    delete<T extends WordDeleteArgs>(
      args: SelectSubset<T, WordDeleteArgs>
    ): CheckSelect<T, Prisma__WordClient<Word>, Prisma__WordClient<WordGetPayload<T>>>

    /**
     * Update one Word.
     * @param {WordUpdateArgs} args - Arguments to update one Word.
     * @example
     * // Update one Word
     * const word = await prisma.word.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WordUpdateArgs>(
      args: SelectSubset<T, WordUpdateArgs>
    ): CheckSelect<T, Prisma__WordClient<Word>, Prisma__WordClient<WordGetPayload<T>>>

    /**
     * Delete zero or more Words.
     * @param {WordDeleteManyArgs} args - Arguments to filter Words to delete.
     * @example
     * // Delete a few Words
     * const { count } = await prisma.word.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WordDeleteManyArgs>(
      args?: SelectSubset<T, WordDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Words.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Words
     * const word = await prisma.word.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WordUpdateManyArgs>(
      args: SelectSubset<T, WordUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Word.
     * @param {WordUpsertArgs} args - Arguments to update or create a Word.
     * @example
     * // Update or create a Word
     * const word = await prisma.word.upsert({
     *   create: {
     *     // ... data to create a Word
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Word we want to update
     *   }
     * })
    **/
    upsert<T extends WordUpsertArgs>(
      args: SelectSubset<T, WordUpsertArgs>
    ): CheckSelect<T, Prisma__WordClient<Word>, Prisma__WordClient<WordGetPayload<T>>>

    /**
     * Count the number of Words.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordCountArgs} args - Arguments to filter Words to count.
     * @example
     * // Count the number of Words
     * const count = await prisma.word.count({
     *   where: {
     *     // ... the filter for the Words we want to count
     *   }
     * })
    **/
    count<T extends WordCountArgs>(
      args?: Subset<T, WordCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Word.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WordAggregateArgs>(args: Subset<T, WordAggregateArgs>): PrismaPromise<GetWordAggregateType<T>>

    /**
     * Group by Word.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WordGroupByArgs['orderBy'] }
        : { orderBy?: WordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWordGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Word.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WordClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Language<T extends LanguageFindManyArgs = {}>(args?: Subset<T, LanguageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Language>>, PrismaPromise<Array<LanguageGetPayload<T>>>>;

    Game<T extends GameFindManyArgs = {}>(args?: Subset<T, GameFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Game>>, PrismaPromise<Array<GameGetPayload<T>>>>;

    WordBank<T extends WordBankArgs = {}>(args?: Subset<T, WordBankArgs>): CheckSelect<T, Prisma__WordBankClient<WordBank | null >, Prisma__WordBankClient<WordBankGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Word findUnique
   */
  export type WordFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
    /**
     * Throw an Error if a Word can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Word to fetch.
     * 
    **/
    where: WordWhereUniqueInput
  }


  /**
   * Word findFirst
   */
  export type WordFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
    /**
     * Throw an Error if a Word can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Word to fetch.
     * 
    **/
    where?: WordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Words to fetch.
     * 
    **/
    orderBy?: Enumerable<WordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Words.
     * 
    **/
    cursor?: WordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Words from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Words.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Words.
     * 
    **/
    distinct?: Enumerable<WordScalarFieldEnum>
  }


  /**
   * Word findMany
   */
  export type WordFindManyArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
    /**
     * Filter, which Words to fetch.
     * 
    **/
    where?: WordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Words to fetch.
     * 
    **/
    orderBy?: Enumerable<WordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Words.
     * 
    **/
    cursor?: WordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Words from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Words.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WordScalarFieldEnum>
  }


  /**
   * Word create
   */
  export type WordCreateArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
    /**
     * The data needed to create a Word.
     * 
    **/
    data: XOR<WordCreateInput, WordUncheckedCreateInput>
  }


  /**
   * Word createMany
   */
  export type WordCreateManyArgs = {
    /**
     * The data used to create many Words.
     * 
    **/
    data: Enumerable<WordCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Word update
   */
  export type WordUpdateArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
    /**
     * The data needed to update a Word.
     * 
    **/
    data: XOR<WordUpdateInput, WordUncheckedUpdateInput>
    /**
     * Choose, which Word to update.
     * 
    **/
    where: WordWhereUniqueInput
  }


  /**
   * Word updateMany
   */
  export type WordUpdateManyArgs = {
    /**
     * The data used to update Words.
     * 
    **/
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyInput>
    /**
     * Filter which Words to update
     * 
    **/
    where?: WordWhereInput
  }


  /**
   * Word upsert
   */
  export type WordUpsertArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
    /**
     * The filter to search for the Word to update in case it exists.
     * 
    **/
    where: WordWhereUniqueInput
    /**
     * In case the Word found by the `where` argument doesn't exist, create a new Word with this data.
     * 
    **/
    create: XOR<WordCreateInput, WordUncheckedCreateInput>
    /**
     * In case the Word was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WordUpdateInput, WordUncheckedUpdateInput>
  }


  /**
   * Word delete
   */
  export type WordDeleteArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
    /**
     * Filter which Word to delete.
     * 
    **/
    where: WordWhereUniqueInput
  }


  /**
   * Word deleteMany
   */
  export type WordDeleteManyArgs = {
    /**
     * Filter which Words to delete
     * 
    **/
    where?: WordWhereInput
  }


  /**
   * Word without action
   */
  export type WordArgs = {
    /**
     * Select specific fields to fetch from the Word
     * 
    **/
    select?: WordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordInclude | null
  }



  /**
   * Model WordBank
   */


  export type AggregateWordBank = {
    _count: WordBankCountAggregateOutputType | null
    _min: WordBankMinAggregateOutputType | null
    _max: WordBankMaxAggregateOutputType | null
  }

  export type WordBankMinAggregateOutputType = {
    id: string | null
    name: string | null
    languageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WordBankMaxAggregateOutputType = {
    id: string | null
    name: string | null
    languageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WordBankCountAggregateOutputType = {
    id: number
    name: number
    languageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WordBankMinAggregateInputType = {
    id?: true
    name?: true
    languageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WordBankMaxAggregateInputType = {
    id?: true
    name?: true
    languageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WordBankCountAggregateInputType = {
    id?: true
    name?: true
    languageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WordBankAggregateArgs = {
    /**
     * Filter which WordBank to aggregate.
     * 
    **/
    where?: WordBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<WordBankOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WordBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordBanks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WordBanks
    **/
    _count?: true | WordBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WordBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WordBankMaxAggregateInputType
  }

  export type GetWordBankAggregateType<T extends WordBankAggregateArgs> = {
        [P in keyof T & keyof AggregateWordBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWordBank[P]>
      : GetScalarType<T[P], AggregateWordBank[P]>
  }




  export type WordBankGroupByArgs = {
    where?: WordBankWhereInput
    orderBy?: Enumerable<WordBankOrderByWithAggregationInput>
    by: Array<WordBankScalarFieldEnum>
    having?: WordBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WordBankCountAggregateInputType | true
    _min?: WordBankMinAggregateInputType
    _max?: WordBankMaxAggregateInputType
  }


  export type WordBankGroupByOutputType = {
    id: string
    name: string
    languageId: string
    createdAt: Date
    updatedAt: Date
    _count: WordBankCountAggregateOutputType | null
    _min: WordBankMinAggregateOutputType | null
    _max: WordBankMaxAggregateOutputType | null
  }

  type GetWordBankGroupByPayload<T extends WordBankGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WordBankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WordBankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WordBankGroupByOutputType[P]>
            : GetScalarType<T[P], WordBankGroupByOutputType[P]>
        }
      >
    >


  export type WordBankSelect = {
    id?: boolean
    name?: boolean
    Language?: boolean | LanguageArgs
    languageId?: boolean
    Word?: boolean | WordFindManyArgs
    Game?: boolean | GameFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | WordBankCountOutputTypeArgs
  }

  export type WordBankInclude = {
    Language?: boolean | LanguageArgs
    Word?: boolean | WordFindManyArgs
    Game?: boolean | GameFindManyArgs
    _count?: boolean | WordBankCountOutputTypeArgs
  }

  export type WordBankGetPayload<
    S extends boolean | null | undefined | WordBankArgs,
    U = keyof S
      > = S extends true
        ? WordBank
    : S extends undefined
    ? never
    : S extends WordBankArgs | WordBankFindManyArgs
    ?'include' extends U
    ? WordBank  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Language' ? LanguageGetPayload<S['include'][P]> :
        P extends 'Word' ? Array < WordGetPayload<S['include'][P]>>  :
        P extends 'Game' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends '_count' ? WordBankCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Language' ? LanguageGetPayload<S['select'][P]> :
        P extends 'Word' ? Array < WordGetPayload<S['select'][P]>>  :
        P extends 'Game' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends '_count' ? WordBankCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof WordBank ? WordBank[P] : never
  } 
    : WordBank
  : WordBank


  type WordBankCountArgs = Merge<
    Omit<WordBankFindManyArgs, 'select' | 'include'> & {
      select?: WordBankCountAggregateInputType | true
    }
  >

  export interface WordBankDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one WordBank that matches the filter.
     * @param {WordBankFindUniqueArgs} args - Arguments to find a WordBank
     * @example
     * // Get one WordBank
     * const wordBank = await prisma.wordBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WordBankFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WordBankFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WordBank'> extends True ? CheckSelect<T, Prisma__WordBankClient<WordBank>, Prisma__WordBankClient<WordBankGetPayload<T>>> : CheckSelect<T, Prisma__WordBankClient<WordBank | null >, Prisma__WordBankClient<WordBankGetPayload<T> | null >>

    /**
     * Find the first WordBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordBankFindFirstArgs} args - Arguments to find a WordBank
     * @example
     * // Get one WordBank
     * const wordBank = await prisma.wordBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WordBankFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WordBankFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WordBank'> extends True ? CheckSelect<T, Prisma__WordBankClient<WordBank>, Prisma__WordBankClient<WordBankGetPayload<T>>> : CheckSelect<T, Prisma__WordBankClient<WordBank | null >, Prisma__WordBankClient<WordBankGetPayload<T> | null >>

    /**
     * Find zero or more WordBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordBankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WordBanks
     * const wordBanks = await prisma.wordBank.findMany()
     * 
     * // Get first 10 WordBanks
     * const wordBanks = await prisma.wordBank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wordBankWithIdOnly = await prisma.wordBank.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WordBankFindManyArgs>(
      args?: SelectSubset<T, WordBankFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<WordBank>>, PrismaPromise<Array<WordBankGetPayload<T>>>>

    /**
     * Create a WordBank.
     * @param {WordBankCreateArgs} args - Arguments to create a WordBank.
     * @example
     * // Create one WordBank
     * const WordBank = await prisma.wordBank.create({
     *   data: {
     *     // ... data to create a WordBank
     *   }
     * })
     * 
    **/
    create<T extends WordBankCreateArgs>(
      args: SelectSubset<T, WordBankCreateArgs>
    ): CheckSelect<T, Prisma__WordBankClient<WordBank>, Prisma__WordBankClient<WordBankGetPayload<T>>>

    /**
     * Create many WordBanks.
     *     @param {WordBankCreateManyArgs} args - Arguments to create many WordBanks.
     *     @example
     *     // Create many WordBanks
     *     const wordBank = await prisma.wordBank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WordBankCreateManyArgs>(
      args?: SelectSubset<T, WordBankCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a WordBank.
     * @param {WordBankDeleteArgs} args - Arguments to delete one WordBank.
     * @example
     * // Delete one WordBank
     * const WordBank = await prisma.wordBank.delete({
     *   where: {
     *     // ... filter to delete one WordBank
     *   }
     * })
     * 
    **/
    delete<T extends WordBankDeleteArgs>(
      args: SelectSubset<T, WordBankDeleteArgs>
    ): CheckSelect<T, Prisma__WordBankClient<WordBank>, Prisma__WordBankClient<WordBankGetPayload<T>>>

    /**
     * Update one WordBank.
     * @param {WordBankUpdateArgs} args - Arguments to update one WordBank.
     * @example
     * // Update one WordBank
     * const wordBank = await prisma.wordBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WordBankUpdateArgs>(
      args: SelectSubset<T, WordBankUpdateArgs>
    ): CheckSelect<T, Prisma__WordBankClient<WordBank>, Prisma__WordBankClient<WordBankGetPayload<T>>>

    /**
     * Delete zero or more WordBanks.
     * @param {WordBankDeleteManyArgs} args - Arguments to filter WordBanks to delete.
     * @example
     * // Delete a few WordBanks
     * const { count } = await prisma.wordBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WordBankDeleteManyArgs>(
      args?: SelectSubset<T, WordBankDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more WordBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WordBanks
     * const wordBank = await prisma.wordBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WordBankUpdateManyArgs>(
      args: SelectSubset<T, WordBankUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one WordBank.
     * @param {WordBankUpsertArgs} args - Arguments to update or create a WordBank.
     * @example
     * // Update or create a WordBank
     * const wordBank = await prisma.wordBank.upsert({
     *   create: {
     *     // ... data to create a WordBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WordBank we want to update
     *   }
     * })
    **/
    upsert<T extends WordBankUpsertArgs>(
      args: SelectSubset<T, WordBankUpsertArgs>
    ): CheckSelect<T, Prisma__WordBankClient<WordBank>, Prisma__WordBankClient<WordBankGetPayload<T>>>

    /**
     * Count the number of WordBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordBankCountArgs} args - Arguments to filter WordBanks to count.
     * @example
     * // Count the number of WordBanks
     * const count = await prisma.wordBank.count({
     *   where: {
     *     // ... the filter for the WordBanks we want to count
     *   }
     * })
    **/
    count<T extends WordBankCountArgs>(
      args?: Subset<T, WordBankCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WordBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WordBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WordBankAggregateArgs>(args: Subset<T, WordBankAggregateArgs>): PrismaPromise<GetWordBankAggregateType<T>>

    /**
     * Group by WordBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WordBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WordBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WordBankGroupByArgs['orderBy'] }
        : { orderBy?: WordBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WordBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWordBankGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for WordBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WordBankClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Language<T extends LanguageArgs = {}>(args?: Subset<T, LanguageArgs>): CheckSelect<T, Prisma__LanguageClient<Language | null >, Prisma__LanguageClient<LanguageGetPayload<T> | null >>;

    Word<T extends WordFindManyArgs = {}>(args?: Subset<T, WordFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Word>>, PrismaPromise<Array<WordGetPayload<T>>>>;

    Game<T extends GameFindManyArgs = {}>(args?: Subset<T, GameFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Game>>, PrismaPromise<Array<GameGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * WordBank findUnique
   */
  export type WordBankFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
    /**
     * Throw an Error if a WordBank can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WordBank to fetch.
     * 
    **/
    where: WordBankWhereUniqueInput
  }


  /**
   * WordBank findFirst
   */
  export type WordBankFindFirstArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
    /**
     * Throw an Error if a WordBank can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WordBank to fetch.
     * 
    **/
    where?: WordBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<WordBankOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WordBanks.
     * 
    **/
    cursor?: WordBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordBanks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WordBanks.
     * 
    **/
    distinct?: Enumerable<WordBankScalarFieldEnum>
  }


  /**
   * WordBank findMany
   */
  export type WordBankFindManyArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
    /**
     * Filter, which WordBanks to fetch.
     * 
    **/
    where?: WordBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WordBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<WordBankOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WordBanks.
     * 
    **/
    cursor?: WordBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WordBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WordBanks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WordBankScalarFieldEnum>
  }


  /**
   * WordBank create
   */
  export type WordBankCreateArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
    /**
     * The data needed to create a WordBank.
     * 
    **/
    data: XOR<WordBankCreateInput, WordBankUncheckedCreateInput>
  }


  /**
   * WordBank createMany
   */
  export type WordBankCreateManyArgs = {
    /**
     * The data used to create many WordBanks.
     * 
    **/
    data: Enumerable<WordBankCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WordBank update
   */
  export type WordBankUpdateArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
    /**
     * The data needed to update a WordBank.
     * 
    **/
    data: XOR<WordBankUpdateInput, WordBankUncheckedUpdateInput>
    /**
     * Choose, which WordBank to update.
     * 
    **/
    where: WordBankWhereUniqueInput
  }


  /**
   * WordBank updateMany
   */
  export type WordBankUpdateManyArgs = {
    /**
     * The data used to update WordBanks.
     * 
    **/
    data: XOR<WordBankUpdateManyMutationInput, WordBankUncheckedUpdateManyInput>
    /**
     * Filter which WordBanks to update
     * 
    **/
    where?: WordBankWhereInput
  }


  /**
   * WordBank upsert
   */
  export type WordBankUpsertArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
    /**
     * The filter to search for the WordBank to update in case it exists.
     * 
    **/
    where: WordBankWhereUniqueInput
    /**
     * In case the WordBank found by the `where` argument doesn't exist, create a new WordBank with this data.
     * 
    **/
    create: XOR<WordBankCreateInput, WordBankUncheckedCreateInput>
    /**
     * In case the WordBank was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WordBankUpdateInput, WordBankUncheckedUpdateInput>
  }


  /**
   * WordBank delete
   */
  export type WordBankDeleteArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
    /**
     * Filter which WordBank to delete.
     * 
    **/
    where: WordBankWhereUniqueInput
  }


  /**
   * WordBank deleteMany
   */
  export type WordBankDeleteManyArgs = {
    /**
     * Filter which WordBanks to delete
     * 
    **/
    where?: WordBankWhereInput
  }


  /**
   * WordBank without action
   */
  export type WordBankArgs = {
    /**
     * Select specific fields to fetch from the WordBank
     * 
    **/
    select?: WordBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WordBankInclude | null
  }



  /**
   * Model Game
   */


  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    tries: number | null
    duration: number | null
  }

  export type GameSumAggregateOutputType = {
    tries: number | null
    duration: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    name: string | null
    tries: number | null
    startedAt: Date | null
    finishedAt: Date | null
    correct: boolean | null
    duration: number | null
    userId: string | null
    wordId: string | null
    wordsBankId: string | null
    statisticsId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    name: string | null
    tries: number | null
    startedAt: Date | null
    finishedAt: Date | null
    correct: boolean | null
    duration: number | null
    userId: string | null
    wordId: string | null
    wordsBankId: string | null
    statisticsId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    tries: number
    startedAt: number
    finishedAt: number
    correct: number
    duration: number
    userId: number
    wordId: number
    wordsBankId: number
    statisticsId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    tries?: true
    duration?: true
  }

  export type GameSumAggregateInputType = {
    tries?: true
    duration?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    tries?: true
    startedAt?: true
    finishedAt?: true
    correct?: true
    duration?: true
    userId?: true
    wordId?: true
    wordsBankId?: true
    statisticsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    tries?: true
    startedAt?: true
    finishedAt?: true
    correct?: true
    duration?: true
    userId?: true
    wordId?: true
    wordsBankId?: true
    statisticsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    tries?: true
    startedAt?: true
    finishedAt?: true
    correct?: true
    duration?: true
    userId?: true
    wordId?: true
    wordsBankId?: true
    statisticsId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs = {
    /**
     * Filter which Game to aggregate.
     * 
    **/
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     * 
    **/
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs = {
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithAggregationInput>
    by: Array<GameScalarFieldEnum>
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }


  export type GameGroupByOutputType = {
    id: string
    name: string
    tries: number
    startedAt: Date
    finishedAt: Date | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    wordsBankId: string
    statisticsId: string
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect = {
    id?: boolean
    name?: boolean
    tries?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    correct?: boolean
    duration?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    word?: boolean | WordArgs
    wordId?: boolean
    wordsBank?: boolean | WordBankArgs
    wordsBankId?: boolean
    tryRows?: boolean | TryRowFindManyArgs
    statistics?: boolean | StatisticArgs
    statisticsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | GameCountOutputTypeArgs
  }

  export type GameInclude = {
    user?: boolean | UserArgs
    word?: boolean | WordArgs
    wordsBank?: boolean | WordBankArgs
    tryRows?: boolean | TryRowFindManyArgs
    statistics?: boolean | StatisticArgs
    _count?: boolean | GameCountOutputTypeArgs
  }

  export type GameGetPayload<
    S extends boolean | null | undefined | GameArgs,
    U = keyof S
      > = S extends true
        ? Game
    : S extends undefined
    ? never
    : S extends GameArgs | GameFindManyArgs
    ?'include' extends U
    ? Game  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'word' ? WordGetPayload<S['include'][P]> :
        P extends 'wordsBank' ? WordBankGetPayload<S['include'][P]> :
        P extends 'tryRows' ? Array < TryRowGetPayload<S['include'][P]>>  :
        P extends 'statistics' ? StatisticGetPayload<S['include'][P]> | null :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'word' ? WordGetPayload<S['select'][P]> :
        P extends 'wordsBank' ? WordBankGetPayload<S['select'][P]> :
        P extends 'tryRows' ? Array < TryRowGetPayload<S['select'][P]>>  :
        P extends 'statistics' ? StatisticGetPayload<S['select'][P]> | null :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Game ? Game[P] : never
  } 
    : Game
  : Game


  type GameCountArgs = Merge<
    Omit<GameFindManyArgs, 'select' | 'include'> & {
      select?: GameCountAggregateInputType | true
    }
  >

  export interface GameDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Game'> extends True ? CheckSelect<T, Prisma__GameClient<Game>, Prisma__GameClient<GameGetPayload<T>>> : CheckSelect<T, Prisma__GameClient<Game | null >, Prisma__GameClient<GameGetPayload<T> | null >>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Game'> extends True ? CheckSelect<T, Prisma__GameClient<Game>, Prisma__GameClient<GameGetPayload<T>>> : CheckSelect<T, Prisma__GameClient<Game | null >, Prisma__GameClient<GameGetPayload<T> | null >>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GameFindManyArgs>(
      args?: SelectSubset<T, GameFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Game>>, PrismaPromise<Array<GameGetPayload<T>>>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends GameCreateArgs>(
      args: SelectSubset<T, GameCreateArgs>
    ): CheckSelect<T, Prisma__GameClient<Game>, Prisma__GameClient<GameGetPayload<T>>>

    /**
     * Create many Games.
     *     @param {GameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameCreateManyArgs>(
      args?: SelectSubset<T, GameCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends GameDeleteArgs>(
      args: SelectSubset<T, GameDeleteArgs>
    ): CheckSelect<T, Prisma__GameClient<Game>, Prisma__GameClient<GameGetPayload<T>>>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameUpdateArgs>(
      args: SelectSubset<T, GameUpdateArgs>
    ): CheckSelect<T, Prisma__GameClient<Game>, Prisma__GameClient<GameGetPayload<T>>>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameDeleteManyArgs>(
      args?: SelectSubset<T, GameDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameUpdateManyArgs>(
      args: SelectSubset<T, GameUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends GameUpsertArgs>(
      args: SelectSubset<T, GameUpsertArgs>
    ): CheckSelect<T, Prisma__GameClient<Game>, Prisma__GameClient<GameGetPayload<T>>>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    word<T extends WordArgs = {}>(args?: Subset<T, WordArgs>): CheckSelect<T, Prisma__WordClient<Word | null >, Prisma__WordClient<WordGetPayload<T> | null >>;

    wordsBank<T extends WordBankArgs = {}>(args?: Subset<T, WordBankArgs>): CheckSelect<T, Prisma__WordBankClient<WordBank | null >, Prisma__WordBankClient<WordBankGetPayload<T> | null >>;

    tryRows<T extends TryRowFindManyArgs = {}>(args?: Subset<T, TryRowFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TryRow>>, PrismaPromise<Array<TryRowGetPayload<T>>>>;

    statistics<T extends StatisticArgs = {}>(args?: Subset<T, StatisticArgs>): CheckSelect<T, Prisma__StatisticClient<Statistic | null >, Prisma__StatisticClient<StatisticGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Throw an Error if a Game can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Game to fetch.
     * 
    **/
    where: GameWhereUniqueInput
  }


  /**
   * Game findFirst
   */
  export type GameFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Throw an Error if a Game can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Game to fetch.
     * 
    **/
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     * 
    **/
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     * 
    **/
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     * 
    **/
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game findMany
   */
  export type GameFindManyArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter, which Games to fetch.
     * 
    **/
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     * 
    **/
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     * 
    **/
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game create
   */
  export type GameCreateArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * The data needed to create a Game.
     * 
    **/
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }


  /**
   * Game createMany
   */
  export type GameCreateManyArgs = {
    /**
     * The data used to create many Games.
     * 
    **/
    data: Enumerable<GameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Game update
   */
  export type GameUpdateArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * The data needed to update a Game.
     * 
    **/
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     * 
    **/
    where: GameWhereUniqueInput
  }


  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs = {
    /**
     * The data used to update Games.
     * 
    **/
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     * 
    **/
    where?: GameWhereInput
  }


  /**
   * Game upsert
   */
  export type GameUpsertArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * The filter to search for the Game to update in case it exists.
     * 
    **/
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     * 
    **/
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }


  /**
   * Game delete
   */
  export type GameDeleteArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter which Game to delete.
     * 
    **/
    where: GameWhereUniqueInput
  }


  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs = {
    /**
     * Filter which Games to delete
     * 
    **/
    where?: GameWhereInput
  }


  /**
   * Game without action
   */
  export type GameArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
  }



  /**
   * Model Letter
   */


  export type AggregateLetter = {
    _count: LetterCountAggregateOutputType | null
    _min: LetterMinAggregateOutputType | null
    _max: LetterMaxAggregateOutputType | null
  }

  export type LetterMinAggregateOutputType = {
    id: string | null
    letter: string | null
    tryRowId: string | null
    createdAt: Date | null
    modifiedAt: Date | null
  }

  export type LetterMaxAggregateOutputType = {
    id: string | null
    letter: string | null
    tryRowId: string | null
    createdAt: Date | null
    modifiedAt: Date | null
  }

  export type LetterCountAggregateOutputType = {
    id: number
    letter: number
    tryRowId: number
    createdAt: number
    modifiedAt: number
    _all: number
  }


  export type LetterMinAggregateInputType = {
    id?: true
    letter?: true
    tryRowId?: true
    createdAt?: true
    modifiedAt?: true
  }

  export type LetterMaxAggregateInputType = {
    id?: true
    letter?: true
    tryRowId?: true
    createdAt?: true
    modifiedAt?: true
  }

  export type LetterCountAggregateInputType = {
    id?: true
    letter?: true
    tryRowId?: true
    createdAt?: true
    modifiedAt?: true
    _all?: true
  }

  export type LetterAggregateArgs = {
    /**
     * Filter which Letter to aggregate.
     * 
    **/
    where?: LetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letters to fetch.
     * 
    **/
    orderBy?: Enumerable<LetterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Letters
    **/
    _count?: true | LetterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LetterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LetterMaxAggregateInputType
  }

  export type GetLetterAggregateType<T extends LetterAggregateArgs> = {
        [P in keyof T & keyof AggregateLetter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLetter[P]>
      : GetScalarType<T[P], AggregateLetter[P]>
  }




  export type LetterGroupByArgs = {
    where?: LetterWhereInput
    orderBy?: Enumerable<LetterOrderByWithAggregationInput>
    by: Array<LetterScalarFieldEnum>
    having?: LetterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LetterCountAggregateInputType | true
    _min?: LetterMinAggregateInputType
    _max?: LetterMaxAggregateInputType
  }


  export type LetterGroupByOutputType = {
    id: string
    letter: string
    tryRowId: string
    createdAt: Date
    modifiedAt: Date
    _count: LetterCountAggregateOutputType | null
    _min: LetterMinAggregateOutputType | null
    _max: LetterMaxAggregateOutputType | null
  }

  type GetLetterGroupByPayload<T extends LetterGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LetterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LetterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LetterGroupByOutputType[P]>
            : GetScalarType<T[P], LetterGroupByOutputType[P]>
        }
      >
    >


  export type LetterSelect = {
    id?: boolean
    letter?: boolean
    tryRow?: boolean | TryRowArgs
    tryRowId?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
  }

  export type LetterInclude = {
    tryRow?: boolean | TryRowArgs
  }

  export type LetterGetPayload<
    S extends boolean | null | undefined | LetterArgs,
    U = keyof S
      > = S extends true
        ? Letter
    : S extends undefined
    ? never
    : S extends LetterArgs | LetterFindManyArgs
    ?'include' extends U
    ? Letter  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tryRow' ? TryRowGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tryRow' ? TryRowGetPayload<S['select'][P]> :  P extends keyof Letter ? Letter[P] : never
  } 
    : Letter
  : Letter


  type LetterCountArgs = Merge<
    Omit<LetterFindManyArgs, 'select' | 'include'> & {
      select?: LetterCountAggregateInputType | true
    }
  >

  export interface LetterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Letter that matches the filter.
     * @param {LetterFindUniqueArgs} args - Arguments to find a Letter
     * @example
     * // Get one Letter
     * const letter = await prisma.letter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LetterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LetterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Letter'> extends True ? CheckSelect<T, Prisma__LetterClient<Letter>, Prisma__LetterClient<LetterGetPayload<T>>> : CheckSelect<T, Prisma__LetterClient<Letter | null >, Prisma__LetterClient<LetterGetPayload<T> | null >>

    /**
     * Find the first Letter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterFindFirstArgs} args - Arguments to find a Letter
     * @example
     * // Get one Letter
     * const letter = await prisma.letter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LetterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LetterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Letter'> extends True ? CheckSelect<T, Prisma__LetterClient<Letter>, Prisma__LetterClient<LetterGetPayload<T>>> : CheckSelect<T, Prisma__LetterClient<Letter | null >, Prisma__LetterClient<LetterGetPayload<T> | null >>

    /**
     * Find zero or more Letters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Letters
     * const letters = await prisma.letter.findMany()
     * 
     * // Get first 10 Letters
     * const letters = await prisma.letter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const letterWithIdOnly = await prisma.letter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LetterFindManyArgs>(
      args?: SelectSubset<T, LetterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Letter>>, PrismaPromise<Array<LetterGetPayload<T>>>>

    /**
     * Create a Letter.
     * @param {LetterCreateArgs} args - Arguments to create a Letter.
     * @example
     * // Create one Letter
     * const Letter = await prisma.letter.create({
     *   data: {
     *     // ... data to create a Letter
     *   }
     * })
     * 
    **/
    create<T extends LetterCreateArgs>(
      args: SelectSubset<T, LetterCreateArgs>
    ): CheckSelect<T, Prisma__LetterClient<Letter>, Prisma__LetterClient<LetterGetPayload<T>>>

    /**
     * Create many Letters.
     *     @param {LetterCreateManyArgs} args - Arguments to create many Letters.
     *     @example
     *     // Create many Letters
     *     const letter = await prisma.letter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LetterCreateManyArgs>(
      args?: SelectSubset<T, LetterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Letter.
     * @param {LetterDeleteArgs} args - Arguments to delete one Letter.
     * @example
     * // Delete one Letter
     * const Letter = await prisma.letter.delete({
     *   where: {
     *     // ... filter to delete one Letter
     *   }
     * })
     * 
    **/
    delete<T extends LetterDeleteArgs>(
      args: SelectSubset<T, LetterDeleteArgs>
    ): CheckSelect<T, Prisma__LetterClient<Letter>, Prisma__LetterClient<LetterGetPayload<T>>>

    /**
     * Update one Letter.
     * @param {LetterUpdateArgs} args - Arguments to update one Letter.
     * @example
     * // Update one Letter
     * const letter = await prisma.letter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LetterUpdateArgs>(
      args: SelectSubset<T, LetterUpdateArgs>
    ): CheckSelect<T, Prisma__LetterClient<Letter>, Prisma__LetterClient<LetterGetPayload<T>>>

    /**
     * Delete zero or more Letters.
     * @param {LetterDeleteManyArgs} args - Arguments to filter Letters to delete.
     * @example
     * // Delete a few Letters
     * const { count } = await prisma.letter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LetterDeleteManyArgs>(
      args?: SelectSubset<T, LetterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Letters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Letters
     * const letter = await prisma.letter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LetterUpdateManyArgs>(
      args: SelectSubset<T, LetterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Letter.
     * @param {LetterUpsertArgs} args - Arguments to update or create a Letter.
     * @example
     * // Update or create a Letter
     * const letter = await prisma.letter.upsert({
     *   create: {
     *     // ... data to create a Letter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Letter we want to update
     *   }
     * })
    **/
    upsert<T extends LetterUpsertArgs>(
      args: SelectSubset<T, LetterUpsertArgs>
    ): CheckSelect<T, Prisma__LetterClient<Letter>, Prisma__LetterClient<LetterGetPayload<T>>>

    /**
     * Count the number of Letters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterCountArgs} args - Arguments to filter Letters to count.
     * @example
     * // Count the number of Letters
     * const count = await prisma.letter.count({
     *   where: {
     *     // ... the filter for the Letters we want to count
     *   }
     * })
    **/
    count<T extends LetterCountArgs>(
      args?: Subset<T, LetterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LetterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Letter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LetterAggregateArgs>(args: Subset<T, LetterAggregateArgs>): PrismaPromise<GetLetterAggregateType<T>>

    /**
     * Group by Letter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LetterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LetterGroupByArgs['orderBy'] }
        : { orderBy?: LetterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LetterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLetterGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Letter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LetterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tryRow<T extends TryRowArgs = {}>(args?: Subset<T, TryRowArgs>): CheckSelect<T, Prisma__TryRowClient<TryRow | null >, Prisma__TryRowClient<TryRowGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Letter findUnique
   */
  export type LetterFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
    /**
     * Throw an Error if a Letter can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Letter to fetch.
     * 
    **/
    where: LetterWhereUniqueInput
  }


  /**
   * Letter findFirst
   */
  export type LetterFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
    /**
     * Throw an Error if a Letter can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Letter to fetch.
     * 
    **/
    where?: LetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letters to fetch.
     * 
    **/
    orderBy?: Enumerable<LetterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Letters.
     * 
    **/
    cursor?: LetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Letters.
     * 
    **/
    distinct?: Enumerable<LetterScalarFieldEnum>
  }


  /**
   * Letter findMany
   */
  export type LetterFindManyArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
    /**
     * Filter, which Letters to fetch.
     * 
    **/
    where?: LetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letters to fetch.
     * 
    **/
    orderBy?: Enumerable<LetterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Letters.
     * 
    **/
    cursor?: LetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LetterScalarFieldEnum>
  }


  /**
   * Letter create
   */
  export type LetterCreateArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
    /**
     * The data needed to create a Letter.
     * 
    **/
    data: XOR<LetterCreateInput, LetterUncheckedCreateInput>
  }


  /**
   * Letter createMany
   */
  export type LetterCreateManyArgs = {
    /**
     * The data used to create many Letters.
     * 
    **/
    data: Enumerable<LetterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Letter update
   */
  export type LetterUpdateArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
    /**
     * The data needed to update a Letter.
     * 
    **/
    data: XOR<LetterUpdateInput, LetterUncheckedUpdateInput>
    /**
     * Choose, which Letter to update.
     * 
    **/
    where: LetterWhereUniqueInput
  }


  /**
   * Letter updateMany
   */
  export type LetterUpdateManyArgs = {
    /**
     * The data used to update Letters.
     * 
    **/
    data: XOR<LetterUpdateManyMutationInput, LetterUncheckedUpdateManyInput>
    /**
     * Filter which Letters to update
     * 
    **/
    where?: LetterWhereInput
  }


  /**
   * Letter upsert
   */
  export type LetterUpsertArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
    /**
     * The filter to search for the Letter to update in case it exists.
     * 
    **/
    where: LetterWhereUniqueInput
    /**
     * In case the Letter found by the `where` argument doesn't exist, create a new Letter with this data.
     * 
    **/
    create: XOR<LetterCreateInput, LetterUncheckedCreateInput>
    /**
     * In case the Letter was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LetterUpdateInput, LetterUncheckedUpdateInput>
  }


  /**
   * Letter delete
   */
  export type LetterDeleteArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
    /**
     * Filter which Letter to delete.
     * 
    **/
    where: LetterWhereUniqueInput
  }


  /**
   * Letter deleteMany
   */
  export type LetterDeleteManyArgs = {
    /**
     * Filter which Letters to delete
     * 
    **/
    where?: LetterWhereInput
  }


  /**
   * Letter without action
   */
  export type LetterArgs = {
    /**
     * Select specific fields to fetch from the Letter
     * 
    **/
    select?: LetterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LetterInclude | null
  }



  /**
   * Model TryRow
   */


  export type AggregateTryRow = {
    _count: TryRowCountAggregateOutputType | null
    _avg: TryRowAvgAggregateOutputType | null
    _sum: TryRowSumAggregateOutputType | null
    _min: TryRowMinAggregateOutputType | null
    _max: TryRowMaxAggregateOutputType | null
  }

  export type TryRowAvgAggregateOutputType = {
    tries: number | null
    rowSize: number | null
  }

  export type TryRowSumAggregateOutputType = {
    tries: number | null
    rowSize: number | null
  }

  export type TryRowMinAggregateOutputType = {
    id: string | null
    gameId: string | null
    tries: number | null
    rowSize: number | null
    correct: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TryRowMaxAggregateOutputType = {
    id: string | null
    gameId: string | null
    tries: number | null
    rowSize: number | null
    correct: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TryRowCountAggregateOutputType = {
    id: number
    gameId: number
    tries: number
    rowSize: number
    correct: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TryRowAvgAggregateInputType = {
    tries?: true
    rowSize?: true
  }

  export type TryRowSumAggregateInputType = {
    tries?: true
    rowSize?: true
  }

  export type TryRowMinAggregateInputType = {
    id?: true
    gameId?: true
    tries?: true
    rowSize?: true
    correct?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TryRowMaxAggregateInputType = {
    id?: true
    gameId?: true
    tries?: true
    rowSize?: true
    correct?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TryRowCountAggregateInputType = {
    id?: true
    gameId?: true
    tries?: true
    rowSize?: true
    correct?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TryRowAggregateArgs = {
    /**
     * Filter which TryRow to aggregate.
     * 
    **/
    where?: TryRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TryRows to fetch.
     * 
    **/
    orderBy?: Enumerable<TryRowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TryRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TryRows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TryRows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TryRows
    **/
    _count?: true | TryRowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TryRowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TryRowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TryRowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TryRowMaxAggregateInputType
  }

  export type GetTryRowAggregateType<T extends TryRowAggregateArgs> = {
        [P in keyof T & keyof AggregateTryRow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTryRow[P]>
      : GetScalarType<T[P], AggregateTryRow[P]>
  }




  export type TryRowGroupByArgs = {
    where?: TryRowWhereInput
    orderBy?: Enumerable<TryRowOrderByWithAggregationInput>
    by: Array<TryRowScalarFieldEnum>
    having?: TryRowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TryRowCountAggregateInputType | true
    _avg?: TryRowAvgAggregateInputType
    _sum?: TryRowSumAggregateInputType
    _min?: TryRowMinAggregateInputType
    _max?: TryRowMaxAggregateInputType
  }


  export type TryRowGroupByOutputType = {
    id: string
    gameId: string
    tries: number
    rowSize: number
    correct: boolean
    createdAt: Date
    updatedAt: Date
    _count: TryRowCountAggregateOutputType | null
    _avg: TryRowAvgAggregateOutputType | null
    _sum: TryRowSumAggregateOutputType | null
    _min: TryRowMinAggregateOutputType | null
    _max: TryRowMaxAggregateOutputType | null
  }

  type GetTryRowGroupByPayload<T extends TryRowGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TryRowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TryRowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TryRowGroupByOutputType[P]>
            : GetScalarType<T[P], TryRowGroupByOutputType[P]>
        }
      >
    >


  export type TryRowSelect = {
    id?: boolean
    game?: boolean | GameArgs
    gameId?: boolean
    tries?: boolean
    rowSize?: boolean
    correct?: boolean
    letters?: boolean | LetterFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TryRowCountOutputTypeArgs
  }

  export type TryRowInclude = {
    game?: boolean | GameArgs
    letters?: boolean | LetterFindManyArgs
    _count?: boolean | TryRowCountOutputTypeArgs
  }

  export type TryRowGetPayload<
    S extends boolean | null | undefined | TryRowArgs,
    U = keyof S
      > = S extends true
        ? TryRow
    : S extends undefined
    ? never
    : S extends TryRowArgs | TryRowFindManyArgs
    ?'include' extends U
    ? TryRow  & {
    [P in TrueKeys<S['include']>]:
        P extends 'game' ? GameGetPayload<S['include'][P]> :
        P extends 'letters' ? Array < LetterGetPayload<S['include'][P]>>  :
        P extends '_count' ? TryRowCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'game' ? GameGetPayload<S['select'][P]> :
        P extends 'letters' ? Array < LetterGetPayload<S['select'][P]>>  :
        P extends '_count' ? TryRowCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TryRow ? TryRow[P] : never
  } 
    : TryRow
  : TryRow


  type TryRowCountArgs = Merge<
    Omit<TryRowFindManyArgs, 'select' | 'include'> & {
      select?: TryRowCountAggregateInputType | true
    }
  >

  export interface TryRowDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TryRow that matches the filter.
     * @param {TryRowFindUniqueArgs} args - Arguments to find a TryRow
     * @example
     * // Get one TryRow
     * const tryRow = await prisma.tryRow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TryRowFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TryRowFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TryRow'> extends True ? CheckSelect<T, Prisma__TryRowClient<TryRow>, Prisma__TryRowClient<TryRowGetPayload<T>>> : CheckSelect<T, Prisma__TryRowClient<TryRow | null >, Prisma__TryRowClient<TryRowGetPayload<T> | null >>

    /**
     * Find the first TryRow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryRowFindFirstArgs} args - Arguments to find a TryRow
     * @example
     * // Get one TryRow
     * const tryRow = await prisma.tryRow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TryRowFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TryRowFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TryRow'> extends True ? CheckSelect<T, Prisma__TryRowClient<TryRow>, Prisma__TryRowClient<TryRowGetPayload<T>>> : CheckSelect<T, Prisma__TryRowClient<TryRow | null >, Prisma__TryRowClient<TryRowGetPayload<T> | null >>

    /**
     * Find zero or more TryRows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryRowFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TryRows
     * const tryRows = await prisma.tryRow.findMany()
     * 
     * // Get first 10 TryRows
     * const tryRows = await prisma.tryRow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tryRowWithIdOnly = await prisma.tryRow.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TryRowFindManyArgs>(
      args?: SelectSubset<T, TryRowFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TryRow>>, PrismaPromise<Array<TryRowGetPayload<T>>>>

    /**
     * Create a TryRow.
     * @param {TryRowCreateArgs} args - Arguments to create a TryRow.
     * @example
     * // Create one TryRow
     * const TryRow = await prisma.tryRow.create({
     *   data: {
     *     // ... data to create a TryRow
     *   }
     * })
     * 
    **/
    create<T extends TryRowCreateArgs>(
      args: SelectSubset<T, TryRowCreateArgs>
    ): CheckSelect<T, Prisma__TryRowClient<TryRow>, Prisma__TryRowClient<TryRowGetPayload<T>>>

    /**
     * Create many TryRows.
     *     @param {TryRowCreateManyArgs} args - Arguments to create many TryRows.
     *     @example
     *     // Create many TryRows
     *     const tryRow = await prisma.tryRow.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TryRowCreateManyArgs>(
      args?: SelectSubset<T, TryRowCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TryRow.
     * @param {TryRowDeleteArgs} args - Arguments to delete one TryRow.
     * @example
     * // Delete one TryRow
     * const TryRow = await prisma.tryRow.delete({
     *   where: {
     *     // ... filter to delete one TryRow
     *   }
     * })
     * 
    **/
    delete<T extends TryRowDeleteArgs>(
      args: SelectSubset<T, TryRowDeleteArgs>
    ): CheckSelect<T, Prisma__TryRowClient<TryRow>, Prisma__TryRowClient<TryRowGetPayload<T>>>

    /**
     * Update one TryRow.
     * @param {TryRowUpdateArgs} args - Arguments to update one TryRow.
     * @example
     * // Update one TryRow
     * const tryRow = await prisma.tryRow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TryRowUpdateArgs>(
      args: SelectSubset<T, TryRowUpdateArgs>
    ): CheckSelect<T, Prisma__TryRowClient<TryRow>, Prisma__TryRowClient<TryRowGetPayload<T>>>

    /**
     * Delete zero or more TryRows.
     * @param {TryRowDeleteManyArgs} args - Arguments to filter TryRows to delete.
     * @example
     * // Delete a few TryRows
     * const { count } = await prisma.tryRow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TryRowDeleteManyArgs>(
      args?: SelectSubset<T, TryRowDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TryRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryRowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TryRows
     * const tryRow = await prisma.tryRow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TryRowUpdateManyArgs>(
      args: SelectSubset<T, TryRowUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TryRow.
     * @param {TryRowUpsertArgs} args - Arguments to update or create a TryRow.
     * @example
     * // Update or create a TryRow
     * const tryRow = await prisma.tryRow.upsert({
     *   create: {
     *     // ... data to create a TryRow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TryRow we want to update
     *   }
     * })
    **/
    upsert<T extends TryRowUpsertArgs>(
      args: SelectSubset<T, TryRowUpsertArgs>
    ): CheckSelect<T, Prisma__TryRowClient<TryRow>, Prisma__TryRowClient<TryRowGetPayload<T>>>

    /**
     * Count the number of TryRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryRowCountArgs} args - Arguments to filter TryRows to count.
     * @example
     * // Count the number of TryRows
     * const count = await prisma.tryRow.count({
     *   where: {
     *     // ... the filter for the TryRows we want to count
     *   }
     * })
    **/
    count<T extends TryRowCountArgs>(
      args?: Subset<T, TryRowCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TryRowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TryRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryRowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TryRowAggregateArgs>(args: Subset<T, TryRowAggregateArgs>): PrismaPromise<GetTryRowAggregateType<T>>

    /**
     * Group by TryRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryRowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TryRowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TryRowGroupByArgs['orderBy'] }
        : { orderBy?: TryRowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TryRowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTryRowGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TryRow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TryRowClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    game<T extends GameArgs = {}>(args?: Subset<T, GameArgs>): CheckSelect<T, Prisma__GameClient<Game | null >, Prisma__GameClient<GameGetPayload<T> | null >>;

    letters<T extends LetterFindManyArgs = {}>(args?: Subset<T, LetterFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Letter>>, PrismaPromise<Array<LetterGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TryRow findUnique
   */
  export type TryRowFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
    /**
     * Throw an Error if a TryRow can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TryRow to fetch.
     * 
    **/
    where: TryRowWhereUniqueInput
  }


  /**
   * TryRow findFirst
   */
  export type TryRowFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
    /**
     * Throw an Error if a TryRow can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TryRow to fetch.
     * 
    **/
    where?: TryRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TryRows to fetch.
     * 
    **/
    orderBy?: Enumerable<TryRowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TryRows.
     * 
    **/
    cursor?: TryRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TryRows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TryRows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TryRows.
     * 
    **/
    distinct?: Enumerable<TryRowScalarFieldEnum>
  }


  /**
   * TryRow findMany
   */
  export type TryRowFindManyArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
    /**
     * Filter, which TryRows to fetch.
     * 
    **/
    where?: TryRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TryRows to fetch.
     * 
    **/
    orderBy?: Enumerable<TryRowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TryRows.
     * 
    **/
    cursor?: TryRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TryRows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TryRows.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TryRowScalarFieldEnum>
  }


  /**
   * TryRow create
   */
  export type TryRowCreateArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
    /**
     * The data needed to create a TryRow.
     * 
    **/
    data: XOR<TryRowCreateInput, TryRowUncheckedCreateInput>
  }


  /**
   * TryRow createMany
   */
  export type TryRowCreateManyArgs = {
    /**
     * The data used to create many TryRows.
     * 
    **/
    data: Enumerable<TryRowCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TryRow update
   */
  export type TryRowUpdateArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
    /**
     * The data needed to update a TryRow.
     * 
    **/
    data: XOR<TryRowUpdateInput, TryRowUncheckedUpdateInput>
    /**
     * Choose, which TryRow to update.
     * 
    **/
    where: TryRowWhereUniqueInput
  }


  /**
   * TryRow updateMany
   */
  export type TryRowUpdateManyArgs = {
    /**
     * The data used to update TryRows.
     * 
    **/
    data: XOR<TryRowUpdateManyMutationInput, TryRowUncheckedUpdateManyInput>
    /**
     * Filter which TryRows to update
     * 
    **/
    where?: TryRowWhereInput
  }


  /**
   * TryRow upsert
   */
  export type TryRowUpsertArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
    /**
     * The filter to search for the TryRow to update in case it exists.
     * 
    **/
    where: TryRowWhereUniqueInput
    /**
     * In case the TryRow found by the `where` argument doesn't exist, create a new TryRow with this data.
     * 
    **/
    create: XOR<TryRowCreateInput, TryRowUncheckedCreateInput>
    /**
     * In case the TryRow was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TryRowUpdateInput, TryRowUncheckedUpdateInput>
  }


  /**
   * TryRow delete
   */
  export type TryRowDeleteArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
    /**
     * Filter which TryRow to delete.
     * 
    **/
    where: TryRowWhereUniqueInput
  }


  /**
   * TryRow deleteMany
   */
  export type TryRowDeleteManyArgs = {
    /**
     * Filter which TryRows to delete
     * 
    **/
    where?: TryRowWhereInput
  }


  /**
   * TryRow without action
   */
  export type TryRowArgs = {
    /**
     * Select specific fields to fetch from the TryRow
     * 
    **/
    select?: TryRowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TryRowInclude | null
  }



  /**
   * Model Statistic
   */


  export type AggregateStatistic = {
    _count: StatisticCountAggregateOutputType | null
    _avg: StatisticAvgAggregateOutputType | null
    _sum: StatisticSumAggregateOutputType | null
    _min: StatisticMinAggregateOutputType | null
    _max: StatisticMaxAggregateOutputType | null
  }

  export type StatisticAvgAggregateOutputType = {
    gamePlayed: number | null
    gameWon: number | null
    gameLost: number | null
    streak: number | null
    average: number | null
  }

  export type StatisticSumAggregateOutputType = {
    gamePlayed: number | null
    gameWon: number | null
    gameLost: number | null
    streak: number | null
    average: number | null
  }

  export type StatisticMinAggregateOutputType = {
    id: string | null
    gamePlayed: number | null
    gameWon: number | null
    gameLost: number | null
    streak: number | null
    average: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StatisticMaxAggregateOutputType = {
    id: string | null
    gamePlayed: number | null
    gameWon: number | null
    gameLost: number | null
    streak: number | null
    average: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StatisticCountAggregateOutputType = {
    id: number
    gamePlayed: number
    gameWon: number
    gameLost: number
    streak: number
    average: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StatisticAvgAggregateInputType = {
    gamePlayed?: true
    gameWon?: true
    gameLost?: true
    streak?: true
    average?: true
  }

  export type StatisticSumAggregateInputType = {
    gamePlayed?: true
    gameWon?: true
    gameLost?: true
    streak?: true
    average?: true
  }

  export type StatisticMinAggregateInputType = {
    id?: true
    gamePlayed?: true
    gameWon?: true
    gameLost?: true
    streak?: true
    average?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StatisticMaxAggregateInputType = {
    id?: true
    gamePlayed?: true
    gameWon?: true
    gameLost?: true
    streak?: true
    average?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StatisticCountAggregateInputType = {
    id?: true
    gamePlayed?: true
    gameWon?: true
    gameLost?: true
    streak?: true
    average?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StatisticAggregateArgs = {
    /**
     * Filter which Statistic to aggregate.
     * 
    **/
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     * 
    **/
    orderBy?: Enumerable<StatisticOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statistics
    **/
    _count?: true | StatisticCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatisticAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatisticSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatisticMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatisticMaxAggregateInputType
  }

  export type GetStatisticAggregateType<T extends StatisticAggregateArgs> = {
        [P in keyof T & keyof AggregateStatistic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatistic[P]>
      : GetScalarType<T[P], AggregateStatistic[P]>
  }




  export type StatisticGroupByArgs = {
    where?: StatisticWhereInput
    orderBy?: Enumerable<StatisticOrderByWithAggregationInput>
    by: Array<StatisticScalarFieldEnum>
    having?: StatisticScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatisticCountAggregateInputType | true
    _avg?: StatisticAvgAggregateInputType
    _sum?: StatisticSumAggregateInputType
    _min?: StatisticMinAggregateInputType
    _max?: StatisticMaxAggregateInputType
  }


  export type StatisticGroupByOutputType = {
    id: string
    gamePlayed: number
    gameWon: number
    gameLost: number
    streak: number
    average: number
    createdAt: Date
    updatedAt: Date
    _count: StatisticCountAggregateOutputType | null
    _avg: StatisticAvgAggregateOutputType | null
    _sum: StatisticSumAggregateOutputType | null
    _min: StatisticMinAggregateOutputType | null
    _max: StatisticMaxAggregateOutputType | null
  }

  type GetStatisticGroupByPayload<T extends StatisticGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StatisticGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatisticGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatisticGroupByOutputType[P]>
            : GetScalarType<T[P], StatisticGroupByOutputType[P]>
        }
      >
    >


  export type StatisticSelect = {
    id?: boolean
    gamePlayed?: boolean
    gameWon?: boolean
    gameLost?: boolean
    streak?: boolean
    average?: boolean
    user?: boolean | UserArgs
    Game?: boolean | GameFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | StatisticCountOutputTypeArgs
  }

  export type StatisticInclude = {
    user?: boolean | UserArgs
    Game?: boolean | GameFindManyArgs
    _count?: boolean | StatisticCountOutputTypeArgs
  }

  export type StatisticGetPayload<
    S extends boolean | null | undefined | StatisticArgs,
    U = keyof S
      > = S extends true
        ? Statistic
    : S extends undefined
    ? never
    : S extends StatisticArgs | StatisticFindManyArgs
    ?'include' extends U
    ? Statistic  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'Game' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends '_count' ? StatisticCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'Game' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends '_count' ? StatisticCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Statistic ? Statistic[P] : never
  } 
    : Statistic
  : Statistic


  type StatisticCountArgs = Merge<
    Omit<StatisticFindManyArgs, 'select' | 'include'> & {
      select?: StatisticCountAggregateInputType | true
    }
  >

  export interface StatisticDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Statistic that matches the filter.
     * @param {StatisticFindUniqueArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatisticFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatisticFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Statistic'> extends True ? CheckSelect<T, Prisma__StatisticClient<Statistic>, Prisma__StatisticClient<StatisticGetPayload<T>>> : CheckSelect<T, Prisma__StatisticClient<Statistic | null >, Prisma__StatisticClient<StatisticGetPayload<T> | null >>

    /**
     * Find the first Statistic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindFirstArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatisticFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatisticFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Statistic'> extends True ? CheckSelect<T, Prisma__StatisticClient<Statistic>, Prisma__StatisticClient<StatisticGetPayload<T>>> : CheckSelect<T, Prisma__StatisticClient<Statistic | null >, Prisma__StatisticClient<StatisticGetPayload<T> | null >>

    /**
     * Find zero or more Statistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statistics
     * const statistics = await prisma.statistic.findMany()
     * 
     * // Get first 10 Statistics
     * const statistics = await prisma.statistic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statisticWithIdOnly = await prisma.statistic.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatisticFindManyArgs>(
      args?: SelectSubset<T, StatisticFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Statistic>>, PrismaPromise<Array<StatisticGetPayload<T>>>>

    /**
     * Create a Statistic.
     * @param {StatisticCreateArgs} args - Arguments to create a Statistic.
     * @example
     * // Create one Statistic
     * const Statistic = await prisma.statistic.create({
     *   data: {
     *     // ... data to create a Statistic
     *   }
     * })
     * 
    **/
    create<T extends StatisticCreateArgs>(
      args: SelectSubset<T, StatisticCreateArgs>
    ): CheckSelect<T, Prisma__StatisticClient<Statistic>, Prisma__StatisticClient<StatisticGetPayload<T>>>

    /**
     * Create many Statistics.
     *     @param {StatisticCreateManyArgs} args - Arguments to create many Statistics.
     *     @example
     *     // Create many Statistics
     *     const statistic = await prisma.statistic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatisticCreateManyArgs>(
      args?: SelectSubset<T, StatisticCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Statistic.
     * @param {StatisticDeleteArgs} args - Arguments to delete one Statistic.
     * @example
     * // Delete one Statistic
     * const Statistic = await prisma.statistic.delete({
     *   where: {
     *     // ... filter to delete one Statistic
     *   }
     * })
     * 
    **/
    delete<T extends StatisticDeleteArgs>(
      args: SelectSubset<T, StatisticDeleteArgs>
    ): CheckSelect<T, Prisma__StatisticClient<Statistic>, Prisma__StatisticClient<StatisticGetPayload<T>>>

    /**
     * Update one Statistic.
     * @param {StatisticUpdateArgs} args - Arguments to update one Statistic.
     * @example
     * // Update one Statistic
     * const statistic = await prisma.statistic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatisticUpdateArgs>(
      args: SelectSubset<T, StatisticUpdateArgs>
    ): CheckSelect<T, Prisma__StatisticClient<Statistic>, Prisma__StatisticClient<StatisticGetPayload<T>>>

    /**
     * Delete zero or more Statistics.
     * @param {StatisticDeleteManyArgs} args - Arguments to filter Statistics to delete.
     * @example
     * // Delete a few Statistics
     * const { count } = await prisma.statistic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatisticDeleteManyArgs>(
      args?: SelectSubset<T, StatisticDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statistics
     * const statistic = await prisma.statistic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatisticUpdateManyArgs>(
      args: SelectSubset<T, StatisticUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Statistic.
     * @param {StatisticUpsertArgs} args - Arguments to update or create a Statistic.
     * @example
     * // Update or create a Statistic
     * const statistic = await prisma.statistic.upsert({
     *   create: {
     *     // ... data to create a Statistic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statistic we want to update
     *   }
     * })
    **/
    upsert<T extends StatisticUpsertArgs>(
      args: SelectSubset<T, StatisticUpsertArgs>
    ): CheckSelect<T, Prisma__StatisticClient<Statistic>, Prisma__StatisticClient<StatisticGetPayload<T>>>

    /**
     * Count the number of Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticCountArgs} args - Arguments to filter Statistics to count.
     * @example
     * // Count the number of Statistics
     * const count = await prisma.statistic.count({
     *   where: {
     *     // ... the filter for the Statistics we want to count
     *   }
     * })
    **/
    count<T extends StatisticCountArgs>(
      args?: Subset<T, StatisticCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatisticCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatisticAggregateArgs>(args: Subset<T, StatisticAggregateArgs>): PrismaPromise<GetStatisticAggregateType<T>>

    /**
     * Group by Statistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatisticGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatisticGroupByArgs['orderBy'] }
        : { orderBy?: StatisticGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatisticGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatisticGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Statistic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatisticClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Game<T extends GameFindManyArgs = {}>(args?: Subset<T, GameFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Game>>, PrismaPromise<Array<GameGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Statistic findUnique
   */
  export type StatisticFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
    /**
     * Throw an Error if a Statistic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Statistic to fetch.
     * 
    **/
    where: StatisticWhereUniqueInput
  }


  /**
   * Statistic findFirst
   */
  export type StatisticFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
    /**
     * Throw an Error if a Statistic can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Statistic to fetch.
     * 
    **/
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     * 
    **/
    orderBy?: Enumerable<StatisticOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     * 
    **/
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     * 
    **/
    distinct?: Enumerable<StatisticScalarFieldEnum>
  }


  /**
   * Statistic findMany
   */
  export type StatisticFindManyArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
    /**
     * Filter, which Statistics to fetch.
     * 
    **/
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     * 
    **/
    orderBy?: Enumerable<StatisticOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statistics.
     * 
    **/
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatisticScalarFieldEnum>
  }


  /**
   * Statistic create
   */
  export type StatisticCreateArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
    /**
     * The data needed to create a Statistic.
     * 
    **/
    data: XOR<StatisticCreateInput, StatisticUncheckedCreateInput>
  }


  /**
   * Statistic createMany
   */
  export type StatisticCreateManyArgs = {
    /**
     * The data used to create many Statistics.
     * 
    **/
    data: Enumerable<StatisticCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Statistic update
   */
  export type StatisticUpdateArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
    /**
     * The data needed to update a Statistic.
     * 
    **/
    data: XOR<StatisticUpdateInput, StatisticUncheckedUpdateInput>
    /**
     * Choose, which Statistic to update.
     * 
    **/
    where: StatisticWhereUniqueInput
  }


  /**
   * Statistic updateMany
   */
  export type StatisticUpdateManyArgs = {
    /**
     * The data used to update Statistics.
     * 
    **/
    data: XOR<StatisticUpdateManyMutationInput, StatisticUncheckedUpdateManyInput>
    /**
     * Filter which Statistics to update
     * 
    **/
    where?: StatisticWhereInput
  }


  /**
   * Statistic upsert
   */
  export type StatisticUpsertArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
    /**
     * The filter to search for the Statistic to update in case it exists.
     * 
    **/
    where: StatisticWhereUniqueInput
    /**
     * In case the Statistic found by the `where` argument doesn't exist, create a new Statistic with this data.
     * 
    **/
    create: XOR<StatisticCreateInput, StatisticUncheckedCreateInput>
    /**
     * In case the Statistic was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StatisticUpdateInput, StatisticUncheckedUpdateInput>
  }


  /**
   * Statistic delete
   */
  export type StatisticDeleteArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
    /**
     * Filter which Statistic to delete.
     * 
    **/
    where: StatisticWhereUniqueInput
  }


  /**
   * Statistic deleteMany
   */
  export type StatisticDeleteManyArgs = {
    /**
     * Filter which Statistics to delete
     * 
    **/
    where?: StatisticWhereInput
  }


  /**
   * Statistic without action
   */
  export type StatisticArgs = {
    /**
     * Select specific fields to fetch from the Statistic
     * 
    **/
    select?: StatisticSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatisticInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    name: 'name',
    hashedPassword: 'hashedPassword',
    salt: 'salt',
    resetToken: 'resetToken',
    resetTokenExpiresAt: 'resetTokenExpiresAt',
    roles: 'roles',
    userSettingId: 'userSettingId',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSettingScalarFieldEnum: {
    id: 'id',
    bio: 'bio',
    theme: 'theme',
    languageId: 'languageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSettingScalarFieldEnum = (typeof UserSettingScalarFieldEnum)[keyof typeof UserSettingScalarFieldEnum]


  export const LanguageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LanguageScalarFieldEnum = (typeof LanguageScalarFieldEnum)[keyof typeof LanguageScalarFieldEnum]


  export const WordScalarFieldEnum: {
    id: 'id',
    word: 'word',
    definition: 'definition',
    example: 'example',
    synonym: 'synonym',
    size: 'size',
    source: 'source',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    wordBankId: 'wordBankId'
  };

  export type WordScalarFieldEnum = (typeof WordScalarFieldEnum)[keyof typeof WordScalarFieldEnum]


  export const WordBankScalarFieldEnum: {
    id: 'id',
    name: 'name',
    languageId: 'languageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WordBankScalarFieldEnum = (typeof WordBankScalarFieldEnum)[keyof typeof WordBankScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tries: 'tries',
    startedAt: 'startedAt',
    finishedAt: 'finishedAt',
    correct: 'correct',
    duration: 'duration',
    userId: 'userId',
    wordId: 'wordId',
    wordsBankId: 'wordsBankId',
    statisticsId: 'statisticsId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const LetterScalarFieldEnum: {
    id: 'id',
    letter: 'letter',
    tryRowId: 'tryRowId',
    createdAt: 'createdAt',
    modifiedAt: 'modifiedAt'
  };

  export type LetterScalarFieldEnum = (typeof LetterScalarFieldEnum)[keyof typeof LetterScalarFieldEnum]


  export const TryRowScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    tries: 'tries',
    rowSize: 'rowSize',
    correct: 'correct',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TryRowScalarFieldEnum = (typeof TryRowScalarFieldEnum)[keyof typeof TryRowScalarFieldEnum]


  export const StatisticScalarFieldEnum: {
    id: 'id',
    gamePlayed: 'gamePlayed',
    gameWon: 'gameWon',
    gameLost: 'gameLost',
    streak: 'streak',
    average: 'average',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StatisticScalarFieldEnum = (typeof StatisticScalarFieldEnum)[keyof typeof StatisticScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    name?: StringNullableFilter | string | null
    hashedPassword?: StringFilter | string
    salt?: StringFilter | string
    resetToken?: StringNullableFilter | string | null
    resetTokenExpiresAt?: DateTimeNullableFilter | Date | string | null
    roles?: StringFilter | string
    userSetting?: XOR<UserSettingRelationFilter, UserSettingWhereInput>
    userSettingId?: StringFilter | string
    Game?: GameListRelationFilter
    Statistics?: StatisticListRelationFilter
    lastLogin?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    salt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiresAt?: SortOrder
    roles?: SortOrder
    userSetting?: UserSettingOrderByWithRelationInput
    userSettingId?: SortOrder
    Game?: GameOrderByRelationAggregateInput
    Statistics?: StatisticOrderByRelationAggregateInput
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    salt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiresAt?: SortOrder
    roles?: SortOrder
    userSettingId?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    hashedPassword?: StringWithAggregatesFilter | string
    salt?: StringWithAggregatesFilter | string
    resetToken?: StringNullableWithAggregatesFilter | string | null
    resetTokenExpiresAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    roles?: StringWithAggregatesFilter | string
    userSettingId?: StringWithAggregatesFilter | string
    lastLogin?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserSettingWhereInput = {
    AND?: Enumerable<UserSettingWhereInput>
    OR?: Enumerable<UserSettingWhereInput>
    NOT?: Enumerable<UserSettingWhereInput>
    id?: StringFilter | string
    bio?: StringNullableFilter | string | null
    theme?: StringNullableFilter | string | null
    Language?: XOR<LanguageRelationFilter, LanguageWhereInput>
    User?: UserListRelationFilter
    languageId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserSettingOrderByWithRelationInput = {
    id?: SortOrder
    bio?: SortOrder
    theme?: SortOrder
    Language?: LanguageOrderByWithRelationInput
    User?: UserOrderByRelationAggregateInput
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingWhereUniqueInput = {
    id?: string
  }

  export type UserSettingOrderByWithAggregationInput = {
    id?: SortOrder
    bio?: SortOrder
    theme?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSettingCountOrderByAggregateInput
    _max?: UserSettingMaxOrderByAggregateInput
    _min?: UserSettingMinOrderByAggregateInput
  }

  export type UserSettingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserSettingScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserSettingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserSettingScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    bio?: StringNullableWithAggregatesFilter | string | null
    theme?: StringNullableWithAggregatesFilter | string | null
    languageId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LanguageWhereInput = {
    AND?: Enumerable<LanguageWhereInput>
    OR?: Enumerable<LanguageWhereInput>
    NOT?: Enumerable<LanguageWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    code?: StringFilter | string
    UserSettings?: UserSettingListRelationFilter
    Word?: WordListRelationFilter
    WordBank?: WordBankListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LanguageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    UserSettings?: UserSettingOrderByRelationAggregateInput
    Word?: WordOrderByRelationAggregateInput
    WordBank?: WordBankOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageWhereUniqueInput = {
    id?: string
    code?: string
  }

  export type LanguageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LanguageCountOrderByAggregateInput
    _max?: LanguageMaxOrderByAggregateInput
    _min?: LanguageMinOrderByAggregateInput
  }

  export type LanguageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LanguageScalarWhereWithAggregatesInput>
    OR?: Enumerable<LanguageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LanguageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WordWhereInput = {
    AND?: Enumerable<WordWhereInput>
    OR?: Enumerable<WordWhereInput>
    NOT?: Enumerable<WordWhereInput>
    id?: StringFilter | string
    word?: StringFilter | string
    definition?: StringNullableFilter | string | null
    example?: StringNullableFilter | string | null
    synonym?: StringNullableFilter | string | null
    size?: IntFilter | number
    source?: StringNullableFilter | string | null
    Language?: LanguageListRelationFilter
    Game?: GameListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    WordBank?: XOR<WordBankRelationFilter, WordBankWhereInput> | null
    wordBankId?: StringNullableFilter | string | null
  }

  export type WordOrderByWithRelationInput = {
    id?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    example?: SortOrder
    synonym?: SortOrder
    size?: SortOrder
    source?: SortOrder
    Language?: LanguageOrderByRelationAggregateInput
    Game?: GameOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    WordBank?: WordBankOrderByWithRelationInput
    wordBankId?: SortOrder
  }

  export type WordWhereUniqueInput = {
    id?: string
    word?: string
  }

  export type WordOrderByWithAggregationInput = {
    id?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    example?: SortOrder
    synonym?: SortOrder
    size?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    wordBankId?: SortOrder
    _count?: WordCountOrderByAggregateInput
    _avg?: WordAvgOrderByAggregateInput
    _max?: WordMaxOrderByAggregateInput
    _min?: WordMinOrderByAggregateInput
    _sum?: WordSumOrderByAggregateInput
  }

  export type WordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WordScalarWhereWithAggregatesInput>
    OR?: Enumerable<WordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WordScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    word?: StringWithAggregatesFilter | string
    definition?: StringNullableWithAggregatesFilter | string | null
    example?: StringNullableWithAggregatesFilter | string | null
    synonym?: StringNullableWithAggregatesFilter | string | null
    size?: IntWithAggregatesFilter | number
    source?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    wordBankId?: StringNullableWithAggregatesFilter | string | null
  }

  export type WordBankWhereInput = {
    AND?: Enumerable<WordBankWhereInput>
    OR?: Enumerable<WordBankWhereInput>
    NOT?: Enumerable<WordBankWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    Language?: XOR<LanguageRelationFilter, LanguageWhereInput>
    languageId?: StringFilter | string
    Word?: WordListRelationFilter
    Game?: GameListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WordBankOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Language?: LanguageOrderByWithRelationInput
    languageId?: SortOrder
    Word?: WordOrderByRelationAggregateInput
    Game?: GameOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WordBankWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type WordBankOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WordBankCountOrderByAggregateInput
    _max?: WordBankMaxOrderByAggregateInput
    _min?: WordBankMinOrderByAggregateInput
  }

  export type WordBankScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WordBankScalarWhereWithAggregatesInput>
    OR?: Enumerable<WordBankScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WordBankScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    languageId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GameWhereInput = {
    AND?: Enumerable<GameWhereInput>
    OR?: Enumerable<GameWhereInput>
    NOT?: Enumerable<GameWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    tries?: IntFilter | number
    startedAt?: DateTimeFilter | Date | string
    finishedAt?: DateTimeNullableFilter | Date | string | null
    correct?: BoolFilter | boolean
    duration?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    word?: XOR<WordRelationFilter, WordWhereInput>
    wordId?: StringFilter | string
    wordsBank?: XOR<WordBankRelationFilter, WordBankWhereInput>
    wordsBankId?: StringFilter | string
    tryRows?: TryRowListRelationFilter
    statistics?: XOR<StatisticRelationFilter, StatisticWhereInput> | null
    statisticsId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tries?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    correct?: SortOrder
    duration?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    word?: WordOrderByWithRelationInput
    wordId?: SortOrder
    wordsBank?: WordBankOrderByWithRelationInput
    wordsBankId?: SortOrder
    tryRows?: TryRowOrderByRelationAggregateInput
    statistics?: StatisticOrderByWithRelationInput
    statisticsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameWhereUniqueInput = {
    id?: string
  }

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    tries?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    correct?: SortOrder
    duration?: SortOrder
    userId?: SortOrder
    wordId?: SortOrder
    wordsBankId?: SortOrder
    statisticsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    tries?: IntWithAggregatesFilter | number
    startedAt?: DateTimeWithAggregatesFilter | Date | string
    finishedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    correct?: BoolWithAggregatesFilter | boolean
    duration?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    wordId?: StringWithAggregatesFilter | string
    wordsBankId?: StringWithAggregatesFilter | string
    statisticsId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LetterWhereInput = {
    AND?: Enumerable<LetterWhereInput>
    OR?: Enumerable<LetterWhereInput>
    NOT?: Enumerable<LetterWhereInput>
    id?: StringFilter | string
    letter?: StringFilter | string
    tryRow?: XOR<TryRowRelationFilter, TryRowWhereInput>
    tryRowId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    modifiedAt?: DateTimeFilter | Date | string
  }

  export type LetterOrderByWithRelationInput = {
    id?: SortOrder
    letter?: SortOrder
    tryRow?: TryRowOrderByWithRelationInput
    tryRowId?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
  }

  export type LetterWhereUniqueInput = {
    id?: string
  }

  export type LetterOrderByWithAggregationInput = {
    id?: SortOrder
    letter?: SortOrder
    tryRowId?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    _count?: LetterCountOrderByAggregateInput
    _max?: LetterMaxOrderByAggregateInput
    _min?: LetterMinOrderByAggregateInput
  }

  export type LetterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LetterScalarWhereWithAggregatesInput>
    OR?: Enumerable<LetterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LetterScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    letter?: StringWithAggregatesFilter | string
    tryRowId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    modifiedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TryRowWhereInput = {
    AND?: Enumerable<TryRowWhereInput>
    OR?: Enumerable<TryRowWhereInput>
    NOT?: Enumerable<TryRowWhereInput>
    id?: StringFilter | string
    game?: XOR<GameRelationFilter, GameWhereInput>
    gameId?: StringFilter | string
    tries?: IntFilter | number
    rowSize?: IntFilter | number
    correct?: BoolFilter | boolean
    letters?: LetterListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TryRowOrderByWithRelationInput = {
    id?: SortOrder
    game?: GameOrderByWithRelationInput
    gameId?: SortOrder
    tries?: SortOrder
    rowSize?: SortOrder
    correct?: SortOrder
    letters?: LetterOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TryRowWhereUniqueInput = {
    id?: string
  }

  export type TryRowOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    tries?: SortOrder
    rowSize?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TryRowCountOrderByAggregateInput
    _avg?: TryRowAvgOrderByAggregateInput
    _max?: TryRowMaxOrderByAggregateInput
    _min?: TryRowMinOrderByAggregateInput
    _sum?: TryRowSumOrderByAggregateInput
  }

  export type TryRowScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TryRowScalarWhereWithAggregatesInput>
    OR?: Enumerable<TryRowScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TryRowScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    gameId?: StringWithAggregatesFilter | string
    tries?: IntWithAggregatesFilter | number
    rowSize?: IntWithAggregatesFilter | number
    correct?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StatisticWhereInput = {
    AND?: Enumerable<StatisticWhereInput>
    OR?: Enumerable<StatisticWhereInput>
    NOT?: Enumerable<StatisticWhereInput>
    id?: StringFilter | string
    gamePlayed?: IntFilter | number
    gameWon?: IntFilter | number
    gameLost?: IntFilter | number
    streak?: IntFilter | number
    average?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    Game?: GameListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type StatisticOrderByWithRelationInput = {
    id?: SortOrder
    gamePlayed?: SortOrder
    gameWon?: SortOrder
    gameLost?: SortOrder
    streak?: SortOrder
    average?: SortOrder
    user?: UserOrderByWithRelationInput
    Game?: GameOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StatisticWhereUniqueInput = {
    id?: string
  }

  export type StatisticOrderByWithAggregationInput = {
    id?: SortOrder
    gamePlayed?: SortOrder
    gameWon?: SortOrder
    gameLost?: SortOrder
    streak?: SortOrder
    average?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StatisticCountOrderByAggregateInput
    _avg?: StatisticAvgOrderByAggregateInput
    _max?: StatisticMaxOrderByAggregateInput
    _min?: StatisticMinOrderByAggregateInput
    _sum?: StatisticSumOrderByAggregateInput
  }

  export type StatisticScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatisticScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatisticScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatisticScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    gamePlayed?: IntWithAggregatesFilter | number
    gameWon?: IntWithAggregatesFilter | number
    gameLost?: IntWithAggregatesFilter | number
    streak?: IntWithAggregatesFilter | number
    average?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    userSetting: UserSettingCreateNestedOneWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    Statistics?: StatisticCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    userSettingId: string
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Statistics?: StatisticUncheckedCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    userSetting?: UserSettingUpdateOneRequiredWithoutUserInput
    Game?: GameUpdateManyWithoutUserInput
    Statistics?: StatisticUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    userSettingId?: StringFieldUpdateOperationsInput | string
    Game?: GameUncheckedUpdateManyWithoutUserInput
    Statistics?: StatisticUncheckedUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    userSettingId: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    userSettingId?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingCreateInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    Language: LanguageCreateNestedOneWithoutUserSettingsInput
    User?: UserCreateNestedManyWithoutUserSettingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUncheckedCreateInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    User?: UserUncheckedCreateNestedManyWithoutUserSettingInput
    languageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUpdateOneRequiredWithoutUserSettingsInput
    User?: UserUpdateManyWithoutUserSettingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUncheckedUpdateManyWithoutUserSettingInput
    languageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingCreateManyInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    languageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    languageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageCreateInput = {
    id?: string
    name: string
    code: string
    UserSettings?: UserSettingCreateNestedManyWithoutLanguageInput
    Word?: WordCreateNestedManyWithoutLanguageInput
    WordBank?: WordBankCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    UserSettings?: UserSettingUncheckedCreateNestedManyWithoutLanguageInput
    Word?: WordUncheckedCreateNestedManyWithoutLanguageInput
    WordBank?: WordBankUncheckedCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    UserSettings?: UserSettingUpdateManyWithoutLanguageInput
    Word?: WordUpdateManyWithoutLanguageInput
    WordBank?: WordBankUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    UserSettings?: UserSettingUncheckedUpdateManyWithoutLanguageInput
    Word?: WordUncheckedUpdateManyWithoutLanguageInput
    WordBank?: WordBankUncheckedUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageCreateManyInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordCreateInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Language?: LanguageCreateNestedManyWithoutWordInput
    Game?: GameCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
    WordBank?: WordBankCreateNestedOneWithoutWordInput
  }

  export type WordUncheckedCreateInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Language?: LanguageUncheckedCreateNestedManyWithoutWordInput
    Game?: GameUncheckedCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
    wordBankId?: string | null
  }

  export type WordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUpdateManyWithoutWordInput
    Game?: GameUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WordBank?: WordBankUpdateOneWithoutWordInput
  }

  export type WordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUncheckedUpdateManyWithoutWordInput
    Game?: GameUncheckedUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wordBankId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordCreateManyInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wordBankId?: string | null
  }

  export type WordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wordBankId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordBankCreateInput = {
    id?: string
    name: string
    Language: LanguageCreateNestedOneWithoutWordBankInput
    Word?: WordCreateNestedManyWithoutWordBankInput
    Game?: GameCreateNestedManyWithoutWordsBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankUncheckedCreateInput = {
    id?: string
    name: string
    languageId: string
    Word?: WordUncheckedCreateNestedManyWithoutWordBankInput
    Game?: GameUncheckedCreateNestedManyWithoutWordsBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Language?: LanguageUpdateOneRequiredWithoutWordBankInput
    Word?: WordUpdateManyWithoutWordBankInput
    Game?: GameUpdateManyWithoutWordsBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordBankUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    languageId?: StringFieldUpdateOperationsInput | string
    Word?: WordUncheckedUpdateManyWithoutWordBankInput
    Game?: GameUncheckedUpdateManyWithoutWordsBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordBankCreateManyInput = {
    id?: string
    name: string
    languageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordBankUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    languageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    user: UserCreateNestedOneWithoutGameInput
    word: WordCreateNestedOneWithoutGameInput
    wordsBank: WordBankCreateNestedOneWithoutGameInput
    tryRows?: TryRowCreateNestedManyWithoutGameInput
    statistics?: StatisticCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUncheckedCreateInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    wordsBankId: string
    tryRows?: TryRowUncheckedCreateNestedManyWithoutGameInput
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutGameInput
    word?: WordUpdateOneRequiredWithoutGameInput
    wordsBank?: WordBankUpdateOneRequiredWithoutGameInput
    tryRows?: TryRowUpdateManyWithoutGameInput
    statistics?: StatisticUpdateOneWithoutGameInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    wordId?: StringFieldUpdateOperationsInput | string
    wordsBankId?: StringFieldUpdateOperationsInput | string
    tryRows?: TryRowUncheckedUpdateManyWithoutGameInput
    statisticsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateManyInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    wordsBankId: string
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    wordId?: StringFieldUpdateOperationsInput | string
    wordsBankId?: StringFieldUpdateOperationsInput | string
    statisticsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterCreateInput = {
    id?: string
    letter: string
    tryRow: TryRowCreateNestedOneWithoutLettersInput
    createdAt: Date | string
    modifiedAt: Date | string
  }

  export type LetterUncheckedCreateInput = {
    id?: string
    letter: string
    tryRowId: string
    createdAt: Date | string
    modifiedAt: Date | string
  }

  export type LetterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    letter?: StringFieldUpdateOperationsInput | string
    tryRow?: TryRowUpdateOneRequiredWithoutLettersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    letter?: StringFieldUpdateOperationsInput | string
    tryRowId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterCreateManyInput = {
    id?: string
    letter: string
    tryRowId: string
    createdAt: Date | string
    modifiedAt: Date | string
  }

  export type LetterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    letter?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    letter?: StringFieldUpdateOperationsInput | string
    tryRowId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowCreateInput = {
    id?: string
    game: GameCreateNestedOneWithoutTryRowsInput
    tries?: number
    rowSize?: number
    correct: boolean
    letters?: LetterCreateNestedManyWithoutTryRowInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowUncheckedCreateInput = {
    id?: string
    gameId: string
    tries?: number
    rowSize?: number
    correct: boolean
    letters?: LetterUncheckedCreateNestedManyWithoutTryRowInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    game?: GameUpdateOneRequiredWithoutTryRowsInput
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    letters?: LetterUpdateManyWithoutTryRowInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    letters?: LetterUncheckedUpdateManyWithoutTryRowInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowCreateManyInput = {
    id?: string
    gameId: string
    tries?: number
    rowSize?: number
    correct: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticCreateInput = {
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    user?: UserCreateNestedOneWithoutStatisticsInput
    Game?: GameCreateNestedManyWithoutStatisticsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticUncheckedCreateInput = {
    id?: string
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    Game?: GameUncheckedCreateNestedManyWithoutStatisticsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticUpdateInput = {
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutStatisticsInput
    Game?: GameUpdateManyWithoutStatisticsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    Game?: GameUncheckedUpdateManyWithoutStatisticsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticCreateManyInput = {
    id?: string
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticUpdateManyMutationInput = {
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UserSettingRelationFilter = {
    is?: UserSettingWhereInput
    isNot?: UserSettingWhereInput
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type StatisticListRelationFilter = {
    every?: StatisticWhereInput
    some?: StatisticWhereInput
    none?: StatisticWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatisticOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    salt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiresAt?: SortOrder
    roles?: SortOrder
    userSettingId?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    salt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiresAt?: SortOrder
    roles?: SortOrder
    userSettingId?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    salt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiresAt?: SortOrder
    roles?: SortOrder
    userSettingId?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type LanguageRelationFilter = {
    is?: LanguageWhereInput
    isNot?: LanguageWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSettingCountOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    theme?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    theme?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingMinOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    theme?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingListRelationFilter = {
    every?: UserSettingWhereInput
    some?: UserSettingWhereInput
    none?: UserSettingWhereInput
  }

  export type WordListRelationFilter = {
    every?: WordWhereInput
    some?: WordWhereInput
    none?: WordWhereInput
  }

  export type WordBankListRelationFilter = {
    every?: WordBankWhereInput
    some?: WordBankWhereInput
    none?: WordBankWhereInput
  }

  export type UserSettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WordBankOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type LanguageListRelationFilter = {
    every?: LanguageWhereInput
    some?: LanguageWhereInput
    none?: LanguageWhereInput
  }

  export type WordBankRelationFilter = {
    is?: WordBankWhereInput | null
    isNot?: WordBankWhereInput | null
  }

  export type LanguageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WordCountOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    example?: SortOrder
    synonym?: SortOrder
    size?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    wordBankId?: SortOrder
  }

  export type WordAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type WordMaxOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    example?: SortOrder
    synonym?: SortOrder
    size?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    wordBankId?: SortOrder
  }

  export type WordMinOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    example?: SortOrder
    synonym?: SortOrder
    size?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    wordBankId?: SortOrder
  }

  export type WordSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type WordBankCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WordBankMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WordBankMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    languageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WordRelationFilter = {
    is?: WordWhereInput
    isNot?: WordWhereInput
  }

  export type TryRowListRelationFilter = {
    every?: TryRowWhereInput
    some?: TryRowWhereInput
    none?: TryRowWhereInput
  }

  export type StatisticRelationFilter = {
    is?: StatisticWhereInput | null
    isNot?: StatisticWhereInput | null
  }

  export type TryRowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tries?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    correct?: SortOrder
    duration?: SortOrder
    userId?: SortOrder
    wordId?: SortOrder
    wordsBankId?: SortOrder
    statisticsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    tries?: SortOrder
    duration?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tries?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    correct?: SortOrder
    duration?: SortOrder
    userId?: SortOrder
    wordId?: SortOrder
    wordsBankId?: SortOrder
    statisticsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tries?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    correct?: SortOrder
    duration?: SortOrder
    userId?: SortOrder
    wordId?: SortOrder
    wordsBankId?: SortOrder
    statisticsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    tries?: SortOrder
    duration?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TryRowRelationFilter = {
    is?: TryRowWhereInput
    isNot?: TryRowWhereInput
  }

  export type LetterCountOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    tryRowId?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
  }

  export type LetterMaxOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    tryRowId?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
  }

  export type LetterMinOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    tryRowId?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type LetterListRelationFilter = {
    every?: LetterWhereInput
    some?: LetterWhereInput
    none?: LetterWhereInput
  }

  export type LetterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TryRowCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    tries?: SortOrder
    rowSize?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TryRowAvgOrderByAggregateInput = {
    tries?: SortOrder
    rowSize?: SortOrder
  }

  export type TryRowMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    tries?: SortOrder
    rowSize?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TryRowMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    tries?: SortOrder
    rowSize?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TryRowSumOrderByAggregateInput = {
    tries?: SortOrder
    rowSize?: SortOrder
  }

  export type StatisticCountOrderByAggregateInput = {
    id?: SortOrder
    gamePlayed?: SortOrder
    gameWon?: SortOrder
    gameLost?: SortOrder
    streak?: SortOrder
    average?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StatisticAvgOrderByAggregateInput = {
    gamePlayed?: SortOrder
    gameWon?: SortOrder
    gameLost?: SortOrder
    streak?: SortOrder
    average?: SortOrder
  }

  export type StatisticMaxOrderByAggregateInput = {
    id?: SortOrder
    gamePlayed?: SortOrder
    gameWon?: SortOrder
    gameLost?: SortOrder
    streak?: SortOrder
    average?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StatisticMinOrderByAggregateInput = {
    id?: SortOrder
    gamePlayed?: SortOrder
    gameWon?: SortOrder
    gameLost?: SortOrder
    streak?: SortOrder
    average?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StatisticSumOrderByAggregateInput = {
    gamePlayed?: SortOrder
    gameWon?: SortOrder
    gameLost?: SortOrder
    streak?: SortOrder
    average?: SortOrder
  }

  export type UserSettingCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingCreateOrConnectWithoutUserInput
    connect?: UserSettingWhereUniqueInput
  }

  export type GameCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type StatisticCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StatisticCreateWithoutUserInput>, Enumerable<StatisticUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatisticCreateOrConnectWithoutUserInput>
    createMany?: StatisticCreateManyUserInputEnvelope
    connect?: Enumerable<StatisticWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type StatisticUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StatisticCreateWithoutUserInput>, Enumerable<StatisticUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatisticCreateOrConnectWithoutUserInput>
    createMany?: StatisticCreateManyUserInputEnvelope
    connect?: Enumerable<StatisticWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserSettingUpdateOneRequiredWithoutUserInput = {
    create?: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingCreateOrConnectWithoutUserInput
    upsert?: UserSettingUpsertWithoutUserInput
    connect?: UserSettingWhereUniqueInput
    update?: XOR<UserSettingUpdateWithoutUserInput, UserSettingUncheckedUpdateWithoutUserInput>
  }

  export type GameUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type StatisticUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<StatisticCreateWithoutUserInput>, Enumerable<StatisticUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatisticCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StatisticUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StatisticCreateManyUserInputEnvelope
    set?: Enumerable<StatisticWhereUniqueInput>
    disconnect?: Enumerable<StatisticWhereUniqueInput>
    delete?: Enumerable<StatisticWhereUniqueInput>
    connect?: Enumerable<StatisticWhereUniqueInput>
    update?: Enumerable<StatisticUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StatisticUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StatisticScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GameUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<GameCreateWithoutUserInput>, Enumerable<GameUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GameCreateManyUserInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type StatisticUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<StatisticCreateWithoutUserInput>, Enumerable<StatisticUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatisticCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StatisticUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StatisticCreateManyUserInputEnvelope
    set?: Enumerable<StatisticWhereUniqueInput>
    disconnect?: Enumerable<StatisticWhereUniqueInput>
    delete?: Enumerable<StatisticWhereUniqueInput>
    connect?: Enumerable<StatisticWhereUniqueInput>
    update?: Enumerable<StatisticUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StatisticUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StatisticScalarWhereInput>
  }

  export type LanguageCreateNestedOneWithoutUserSettingsInput = {
    create?: XOR<LanguageCreateWithoutUserSettingsInput, LanguageUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: LanguageCreateOrConnectWithoutUserSettingsInput
    connect?: LanguageWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutUserSettingInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserSettingInput>, Enumerable<UserUncheckedCreateWithoutUserSettingInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserSettingInput>
    createMany?: UserCreateManyUserSettingInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutUserSettingInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserSettingInput>, Enumerable<UserUncheckedCreateWithoutUserSettingInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserSettingInput>
    createMany?: UserCreateManyUserSettingInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type LanguageUpdateOneRequiredWithoutUserSettingsInput = {
    create?: XOR<LanguageCreateWithoutUserSettingsInput, LanguageUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: LanguageCreateOrConnectWithoutUserSettingsInput
    upsert?: LanguageUpsertWithoutUserSettingsInput
    connect?: LanguageWhereUniqueInput
    update?: XOR<LanguageUpdateWithoutUserSettingsInput, LanguageUncheckedUpdateWithoutUserSettingsInput>
  }

  export type UserUpdateManyWithoutUserSettingInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserSettingInput>, Enumerable<UserUncheckedCreateWithoutUserSettingInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserSettingInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutUserSettingInput>
    createMany?: UserCreateManyUserSettingInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutUserSettingInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutUserSettingInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutUserSettingInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserSettingInput>, Enumerable<UserUncheckedCreateWithoutUserSettingInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserSettingInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutUserSettingInput>
    createMany?: UserCreateManyUserSettingInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutUserSettingInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutUserSettingInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserSettingCreateNestedManyWithoutLanguageInput = {
    create?: XOR<Enumerable<UserSettingCreateWithoutLanguageInput>, Enumerable<UserSettingUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<UserSettingCreateOrConnectWithoutLanguageInput>
    createMany?: UserSettingCreateManyLanguageInputEnvelope
    connect?: Enumerable<UserSettingWhereUniqueInput>
  }

  export type WordCreateNestedManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordCreateWithoutLanguageInput>, Enumerable<WordUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutLanguageInput>
    connect?: Enumerable<WordWhereUniqueInput>
  }

  export type WordBankCreateNestedManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordBankCreateWithoutLanguageInput>, Enumerable<WordBankUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordBankCreateOrConnectWithoutLanguageInput>
    createMany?: WordBankCreateManyLanguageInputEnvelope
    connect?: Enumerable<WordBankWhereUniqueInput>
  }

  export type UserSettingUncheckedCreateNestedManyWithoutLanguageInput = {
    create?: XOR<Enumerable<UserSettingCreateWithoutLanguageInput>, Enumerable<UserSettingUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<UserSettingCreateOrConnectWithoutLanguageInput>
    createMany?: UserSettingCreateManyLanguageInputEnvelope
    connect?: Enumerable<UserSettingWhereUniqueInput>
  }

  export type WordUncheckedCreateNestedManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordCreateWithoutLanguageInput>, Enumerable<WordUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutLanguageInput>
    connect?: Enumerable<WordWhereUniqueInput>
  }

  export type WordBankUncheckedCreateNestedManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordBankCreateWithoutLanguageInput>, Enumerable<WordBankUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordBankCreateOrConnectWithoutLanguageInput>
    createMany?: WordBankCreateManyLanguageInputEnvelope
    connect?: Enumerable<WordBankWhereUniqueInput>
  }

  export type UserSettingUpdateManyWithoutLanguageInput = {
    create?: XOR<Enumerable<UserSettingCreateWithoutLanguageInput>, Enumerable<UserSettingUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<UserSettingCreateOrConnectWithoutLanguageInput>
    upsert?: Enumerable<UserSettingUpsertWithWhereUniqueWithoutLanguageInput>
    createMany?: UserSettingCreateManyLanguageInputEnvelope
    set?: Enumerable<UserSettingWhereUniqueInput>
    disconnect?: Enumerable<UserSettingWhereUniqueInput>
    delete?: Enumerable<UserSettingWhereUniqueInput>
    connect?: Enumerable<UserSettingWhereUniqueInput>
    update?: Enumerable<UserSettingUpdateWithWhereUniqueWithoutLanguageInput>
    updateMany?: Enumerable<UserSettingUpdateManyWithWhereWithoutLanguageInput>
    deleteMany?: Enumerable<UserSettingScalarWhereInput>
  }

  export type WordUpdateManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordCreateWithoutLanguageInput>, Enumerable<WordUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutLanguageInput>
    upsert?: Enumerable<WordUpsertWithWhereUniqueWithoutLanguageInput>
    set?: Enumerable<WordWhereUniqueInput>
    disconnect?: Enumerable<WordWhereUniqueInput>
    delete?: Enumerable<WordWhereUniqueInput>
    connect?: Enumerable<WordWhereUniqueInput>
    update?: Enumerable<WordUpdateWithWhereUniqueWithoutLanguageInput>
    updateMany?: Enumerable<WordUpdateManyWithWhereWithoutLanguageInput>
    deleteMany?: Enumerable<WordScalarWhereInput>
  }

  export type WordBankUpdateManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordBankCreateWithoutLanguageInput>, Enumerable<WordBankUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordBankCreateOrConnectWithoutLanguageInput>
    upsert?: Enumerable<WordBankUpsertWithWhereUniqueWithoutLanguageInput>
    createMany?: WordBankCreateManyLanguageInputEnvelope
    set?: Enumerable<WordBankWhereUniqueInput>
    disconnect?: Enumerable<WordBankWhereUniqueInput>
    delete?: Enumerable<WordBankWhereUniqueInput>
    connect?: Enumerable<WordBankWhereUniqueInput>
    update?: Enumerable<WordBankUpdateWithWhereUniqueWithoutLanguageInput>
    updateMany?: Enumerable<WordBankUpdateManyWithWhereWithoutLanguageInput>
    deleteMany?: Enumerable<WordBankScalarWhereInput>
  }

  export type UserSettingUncheckedUpdateManyWithoutLanguageInput = {
    create?: XOR<Enumerable<UserSettingCreateWithoutLanguageInput>, Enumerable<UserSettingUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<UserSettingCreateOrConnectWithoutLanguageInput>
    upsert?: Enumerable<UserSettingUpsertWithWhereUniqueWithoutLanguageInput>
    createMany?: UserSettingCreateManyLanguageInputEnvelope
    set?: Enumerable<UserSettingWhereUniqueInput>
    disconnect?: Enumerable<UserSettingWhereUniqueInput>
    delete?: Enumerable<UserSettingWhereUniqueInput>
    connect?: Enumerable<UserSettingWhereUniqueInput>
    update?: Enumerable<UserSettingUpdateWithWhereUniqueWithoutLanguageInput>
    updateMany?: Enumerable<UserSettingUpdateManyWithWhereWithoutLanguageInput>
    deleteMany?: Enumerable<UserSettingScalarWhereInput>
  }

  export type WordUncheckedUpdateManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordCreateWithoutLanguageInput>, Enumerable<WordUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutLanguageInput>
    upsert?: Enumerable<WordUpsertWithWhereUniqueWithoutLanguageInput>
    set?: Enumerable<WordWhereUniqueInput>
    disconnect?: Enumerable<WordWhereUniqueInput>
    delete?: Enumerable<WordWhereUniqueInput>
    connect?: Enumerable<WordWhereUniqueInput>
    update?: Enumerable<WordUpdateWithWhereUniqueWithoutLanguageInput>
    updateMany?: Enumerable<WordUpdateManyWithWhereWithoutLanguageInput>
    deleteMany?: Enumerable<WordScalarWhereInput>
  }

  export type WordBankUncheckedUpdateManyWithoutLanguageInput = {
    create?: XOR<Enumerable<WordBankCreateWithoutLanguageInput>, Enumerable<WordBankUncheckedCreateWithoutLanguageInput>>
    connectOrCreate?: Enumerable<WordBankCreateOrConnectWithoutLanguageInput>
    upsert?: Enumerable<WordBankUpsertWithWhereUniqueWithoutLanguageInput>
    createMany?: WordBankCreateManyLanguageInputEnvelope
    set?: Enumerable<WordBankWhereUniqueInput>
    disconnect?: Enumerable<WordBankWhereUniqueInput>
    delete?: Enumerable<WordBankWhereUniqueInput>
    connect?: Enumerable<WordBankWhereUniqueInput>
    update?: Enumerable<WordBankUpdateWithWhereUniqueWithoutLanguageInput>
    updateMany?: Enumerable<WordBankUpdateManyWithWhereWithoutLanguageInput>
    deleteMany?: Enumerable<WordBankScalarWhereInput>
  }

  export type LanguageCreateNestedManyWithoutWordInput = {
    create?: XOR<Enumerable<LanguageCreateWithoutWordInput>, Enumerable<LanguageUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<LanguageCreateOrConnectWithoutWordInput>
    connect?: Enumerable<LanguageWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutWordInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordInput>, Enumerable<GameUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordInput>
    createMany?: GameCreateManyWordInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type WordBankCreateNestedOneWithoutWordInput = {
    create?: XOR<WordBankCreateWithoutWordInput, WordBankUncheckedCreateWithoutWordInput>
    connectOrCreate?: WordBankCreateOrConnectWithoutWordInput
    connect?: WordBankWhereUniqueInput
  }

  export type LanguageUncheckedCreateNestedManyWithoutWordInput = {
    create?: XOR<Enumerable<LanguageCreateWithoutWordInput>, Enumerable<LanguageUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<LanguageCreateOrConnectWithoutWordInput>
    connect?: Enumerable<LanguageWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutWordInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordInput>, Enumerable<GameUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordInput>
    createMany?: GameCreateManyWordInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LanguageUpdateManyWithoutWordInput = {
    create?: XOR<Enumerable<LanguageCreateWithoutWordInput>, Enumerable<LanguageUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<LanguageCreateOrConnectWithoutWordInput>
    upsert?: Enumerable<LanguageUpsertWithWhereUniqueWithoutWordInput>
    set?: Enumerable<LanguageWhereUniqueInput>
    disconnect?: Enumerable<LanguageWhereUniqueInput>
    delete?: Enumerable<LanguageWhereUniqueInput>
    connect?: Enumerable<LanguageWhereUniqueInput>
    update?: Enumerable<LanguageUpdateWithWhereUniqueWithoutWordInput>
    updateMany?: Enumerable<LanguageUpdateManyWithWhereWithoutWordInput>
    deleteMany?: Enumerable<LanguageScalarWhereInput>
  }

  export type GameUpdateManyWithoutWordInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordInput>, Enumerable<GameUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutWordInput>
    createMany?: GameCreateManyWordInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutWordInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutWordInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type WordBankUpdateOneWithoutWordInput = {
    create?: XOR<WordBankCreateWithoutWordInput, WordBankUncheckedCreateWithoutWordInput>
    connectOrCreate?: WordBankCreateOrConnectWithoutWordInput
    upsert?: WordBankUpsertWithoutWordInput
    disconnect?: boolean
    delete?: boolean
    connect?: WordBankWhereUniqueInput
    update?: XOR<WordBankUpdateWithoutWordInput, WordBankUncheckedUpdateWithoutWordInput>
  }

  export type LanguageUncheckedUpdateManyWithoutWordInput = {
    create?: XOR<Enumerable<LanguageCreateWithoutWordInput>, Enumerable<LanguageUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<LanguageCreateOrConnectWithoutWordInput>
    upsert?: Enumerable<LanguageUpsertWithWhereUniqueWithoutWordInput>
    set?: Enumerable<LanguageWhereUniqueInput>
    disconnect?: Enumerable<LanguageWhereUniqueInput>
    delete?: Enumerable<LanguageWhereUniqueInput>
    connect?: Enumerable<LanguageWhereUniqueInput>
    update?: Enumerable<LanguageUpdateWithWhereUniqueWithoutWordInput>
    updateMany?: Enumerable<LanguageUpdateManyWithWhereWithoutWordInput>
    deleteMany?: Enumerable<LanguageScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutWordInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordInput>, Enumerable<GameUncheckedCreateWithoutWordInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutWordInput>
    createMany?: GameCreateManyWordInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutWordInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutWordInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type LanguageCreateNestedOneWithoutWordBankInput = {
    create?: XOR<LanguageCreateWithoutWordBankInput, LanguageUncheckedCreateWithoutWordBankInput>
    connectOrCreate?: LanguageCreateOrConnectWithoutWordBankInput
    connect?: LanguageWhereUniqueInput
  }

  export type WordCreateNestedManyWithoutWordBankInput = {
    create?: XOR<Enumerable<WordCreateWithoutWordBankInput>, Enumerable<WordUncheckedCreateWithoutWordBankInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutWordBankInput>
    createMany?: WordCreateManyWordBankInputEnvelope
    connect?: Enumerable<WordWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutWordsBankInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordsBankInput>, Enumerable<GameUncheckedCreateWithoutWordsBankInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordsBankInput>
    createMany?: GameCreateManyWordsBankInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type WordUncheckedCreateNestedManyWithoutWordBankInput = {
    create?: XOR<Enumerable<WordCreateWithoutWordBankInput>, Enumerable<WordUncheckedCreateWithoutWordBankInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutWordBankInput>
    createMany?: WordCreateManyWordBankInputEnvelope
    connect?: Enumerable<WordWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutWordsBankInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordsBankInput>, Enumerable<GameUncheckedCreateWithoutWordsBankInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordsBankInput>
    createMany?: GameCreateManyWordsBankInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type LanguageUpdateOneRequiredWithoutWordBankInput = {
    create?: XOR<LanguageCreateWithoutWordBankInput, LanguageUncheckedCreateWithoutWordBankInput>
    connectOrCreate?: LanguageCreateOrConnectWithoutWordBankInput
    upsert?: LanguageUpsertWithoutWordBankInput
    connect?: LanguageWhereUniqueInput
    update?: XOR<LanguageUpdateWithoutWordBankInput, LanguageUncheckedUpdateWithoutWordBankInput>
  }

  export type WordUpdateManyWithoutWordBankInput = {
    create?: XOR<Enumerable<WordCreateWithoutWordBankInput>, Enumerable<WordUncheckedCreateWithoutWordBankInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutWordBankInput>
    upsert?: Enumerable<WordUpsertWithWhereUniqueWithoutWordBankInput>
    createMany?: WordCreateManyWordBankInputEnvelope
    set?: Enumerable<WordWhereUniqueInput>
    disconnect?: Enumerable<WordWhereUniqueInput>
    delete?: Enumerable<WordWhereUniqueInput>
    connect?: Enumerable<WordWhereUniqueInput>
    update?: Enumerable<WordUpdateWithWhereUniqueWithoutWordBankInput>
    updateMany?: Enumerable<WordUpdateManyWithWhereWithoutWordBankInput>
    deleteMany?: Enumerable<WordScalarWhereInput>
  }

  export type GameUpdateManyWithoutWordsBankInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordsBankInput>, Enumerable<GameUncheckedCreateWithoutWordsBankInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordsBankInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutWordsBankInput>
    createMany?: GameCreateManyWordsBankInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutWordsBankInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutWordsBankInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type WordUncheckedUpdateManyWithoutWordBankInput = {
    create?: XOR<Enumerable<WordCreateWithoutWordBankInput>, Enumerable<WordUncheckedCreateWithoutWordBankInput>>
    connectOrCreate?: Enumerable<WordCreateOrConnectWithoutWordBankInput>
    upsert?: Enumerable<WordUpsertWithWhereUniqueWithoutWordBankInput>
    createMany?: WordCreateManyWordBankInputEnvelope
    set?: Enumerable<WordWhereUniqueInput>
    disconnect?: Enumerable<WordWhereUniqueInput>
    delete?: Enumerable<WordWhereUniqueInput>
    connect?: Enumerable<WordWhereUniqueInput>
    update?: Enumerable<WordUpdateWithWhereUniqueWithoutWordBankInput>
    updateMany?: Enumerable<WordUpdateManyWithWhereWithoutWordBankInput>
    deleteMany?: Enumerable<WordScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutWordsBankInput = {
    create?: XOR<Enumerable<GameCreateWithoutWordsBankInput>, Enumerable<GameUncheckedCreateWithoutWordsBankInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutWordsBankInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutWordsBankInput>
    createMany?: GameCreateManyWordsBankInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutWordsBankInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutWordsBankInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutGameInput = {
    create?: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInput
    connect?: UserWhereUniqueInput
  }

  export type WordCreateNestedOneWithoutGameInput = {
    create?: XOR<WordCreateWithoutGameInput, WordUncheckedCreateWithoutGameInput>
    connectOrCreate?: WordCreateOrConnectWithoutGameInput
    connect?: WordWhereUniqueInput
  }

  export type WordBankCreateNestedOneWithoutGameInput = {
    create?: XOR<WordBankCreateWithoutGameInput, WordBankUncheckedCreateWithoutGameInput>
    connectOrCreate?: WordBankCreateOrConnectWithoutGameInput
    connect?: WordBankWhereUniqueInput
  }

  export type TryRowCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<TryRowCreateWithoutGameInput>, Enumerable<TryRowUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TryRowCreateOrConnectWithoutGameInput>
    createMany?: TryRowCreateManyGameInputEnvelope
    connect?: Enumerable<TryRowWhereUniqueInput>
  }

  export type StatisticCreateNestedOneWithoutGameInput = {
    create?: XOR<StatisticCreateWithoutGameInput, StatisticUncheckedCreateWithoutGameInput>
    connectOrCreate?: StatisticCreateOrConnectWithoutGameInput
    connect?: StatisticWhereUniqueInput
  }

  export type TryRowUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<TryRowCreateWithoutGameInput>, Enumerable<TryRowUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TryRowCreateOrConnectWithoutGameInput>
    createMany?: TryRowCreateManyGameInputEnvelope
    connect?: Enumerable<TryRowWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutGameInput = {
    create?: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameInput
    upsert?: UserUpsertWithoutGameInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGameInput, UserUncheckedUpdateWithoutGameInput>
  }

  export type WordUpdateOneRequiredWithoutGameInput = {
    create?: XOR<WordCreateWithoutGameInput, WordUncheckedCreateWithoutGameInput>
    connectOrCreate?: WordCreateOrConnectWithoutGameInput
    upsert?: WordUpsertWithoutGameInput
    connect?: WordWhereUniqueInput
    update?: XOR<WordUpdateWithoutGameInput, WordUncheckedUpdateWithoutGameInput>
  }

  export type WordBankUpdateOneRequiredWithoutGameInput = {
    create?: XOR<WordBankCreateWithoutGameInput, WordBankUncheckedCreateWithoutGameInput>
    connectOrCreate?: WordBankCreateOrConnectWithoutGameInput
    upsert?: WordBankUpsertWithoutGameInput
    connect?: WordBankWhereUniqueInput
    update?: XOR<WordBankUpdateWithoutGameInput, WordBankUncheckedUpdateWithoutGameInput>
  }

  export type TryRowUpdateManyWithoutGameInput = {
    create?: XOR<Enumerable<TryRowCreateWithoutGameInput>, Enumerable<TryRowUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TryRowCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<TryRowUpsertWithWhereUniqueWithoutGameInput>
    createMany?: TryRowCreateManyGameInputEnvelope
    set?: Enumerable<TryRowWhereUniqueInput>
    disconnect?: Enumerable<TryRowWhereUniqueInput>
    delete?: Enumerable<TryRowWhereUniqueInput>
    connect?: Enumerable<TryRowWhereUniqueInput>
    update?: Enumerable<TryRowUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<TryRowUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<TryRowScalarWhereInput>
  }

  export type StatisticUpdateOneWithoutGameInput = {
    create?: XOR<StatisticCreateWithoutGameInput, StatisticUncheckedCreateWithoutGameInput>
    connectOrCreate?: StatisticCreateOrConnectWithoutGameInput
    upsert?: StatisticUpsertWithoutGameInput
    disconnect?: boolean
    delete?: boolean
    connect?: StatisticWhereUniqueInput
    update?: XOR<StatisticUpdateWithoutGameInput, StatisticUncheckedUpdateWithoutGameInput>
  }

  export type TryRowUncheckedUpdateManyWithoutGameInput = {
    create?: XOR<Enumerable<TryRowCreateWithoutGameInput>, Enumerable<TryRowUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TryRowCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<TryRowUpsertWithWhereUniqueWithoutGameInput>
    createMany?: TryRowCreateManyGameInputEnvelope
    set?: Enumerable<TryRowWhereUniqueInput>
    disconnect?: Enumerable<TryRowWhereUniqueInput>
    delete?: Enumerable<TryRowWhereUniqueInput>
    connect?: Enumerable<TryRowWhereUniqueInput>
    update?: Enumerable<TryRowUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<TryRowUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<TryRowScalarWhereInput>
  }

  export type TryRowCreateNestedOneWithoutLettersInput = {
    create?: XOR<TryRowCreateWithoutLettersInput, TryRowUncheckedCreateWithoutLettersInput>
    connectOrCreate?: TryRowCreateOrConnectWithoutLettersInput
    connect?: TryRowWhereUniqueInput
  }

  export type TryRowUpdateOneRequiredWithoutLettersInput = {
    create?: XOR<TryRowCreateWithoutLettersInput, TryRowUncheckedCreateWithoutLettersInput>
    connectOrCreate?: TryRowCreateOrConnectWithoutLettersInput
    upsert?: TryRowUpsertWithoutLettersInput
    connect?: TryRowWhereUniqueInput
    update?: XOR<TryRowUpdateWithoutLettersInput, TryRowUncheckedUpdateWithoutLettersInput>
  }

  export type GameCreateNestedOneWithoutTryRowsInput = {
    create?: XOR<GameCreateWithoutTryRowsInput, GameUncheckedCreateWithoutTryRowsInput>
    connectOrCreate?: GameCreateOrConnectWithoutTryRowsInput
    connect?: GameWhereUniqueInput
  }

  export type LetterCreateNestedManyWithoutTryRowInput = {
    create?: XOR<Enumerable<LetterCreateWithoutTryRowInput>, Enumerable<LetterUncheckedCreateWithoutTryRowInput>>
    connectOrCreate?: Enumerable<LetterCreateOrConnectWithoutTryRowInput>
    createMany?: LetterCreateManyTryRowInputEnvelope
    connect?: Enumerable<LetterWhereUniqueInput>
  }

  export type LetterUncheckedCreateNestedManyWithoutTryRowInput = {
    create?: XOR<Enumerable<LetterCreateWithoutTryRowInput>, Enumerable<LetterUncheckedCreateWithoutTryRowInput>>
    connectOrCreate?: Enumerable<LetterCreateOrConnectWithoutTryRowInput>
    createMany?: LetterCreateManyTryRowInputEnvelope
    connect?: Enumerable<LetterWhereUniqueInput>
  }

  export type GameUpdateOneRequiredWithoutTryRowsInput = {
    create?: XOR<GameCreateWithoutTryRowsInput, GameUncheckedCreateWithoutTryRowsInput>
    connectOrCreate?: GameCreateOrConnectWithoutTryRowsInput
    upsert?: GameUpsertWithoutTryRowsInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutTryRowsInput, GameUncheckedUpdateWithoutTryRowsInput>
  }

  export type LetterUpdateManyWithoutTryRowInput = {
    create?: XOR<Enumerable<LetterCreateWithoutTryRowInput>, Enumerable<LetterUncheckedCreateWithoutTryRowInput>>
    connectOrCreate?: Enumerable<LetterCreateOrConnectWithoutTryRowInput>
    upsert?: Enumerable<LetterUpsertWithWhereUniqueWithoutTryRowInput>
    createMany?: LetterCreateManyTryRowInputEnvelope
    set?: Enumerable<LetterWhereUniqueInput>
    disconnect?: Enumerable<LetterWhereUniqueInput>
    delete?: Enumerable<LetterWhereUniqueInput>
    connect?: Enumerable<LetterWhereUniqueInput>
    update?: Enumerable<LetterUpdateWithWhereUniqueWithoutTryRowInput>
    updateMany?: Enumerable<LetterUpdateManyWithWhereWithoutTryRowInput>
    deleteMany?: Enumerable<LetterScalarWhereInput>
  }

  export type LetterUncheckedUpdateManyWithoutTryRowInput = {
    create?: XOR<Enumerable<LetterCreateWithoutTryRowInput>, Enumerable<LetterUncheckedCreateWithoutTryRowInput>>
    connectOrCreate?: Enumerable<LetterCreateOrConnectWithoutTryRowInput>
    upsert?: Enumerable<LetterUpsertWithWhereUniqueWithoutTryRowInput>
    createMany?: LetterCreateManyTryRowInputEnvelope
    set?: Enumerable<LetterWhereUniqueInput>
    disconnect?: Enumerable<LetterWhereUniqueInput>
    delete?: Enumerable<LetterWhereUniqueInput>
    connect?: Enumerable<LetterWhereUniqueInput>
    update?: Enumerable<LetterUpdateWithWhereUniqueWithoutTryRowInput>
    updateMany?: Enumerable<LetterUpdateManyWithWhereWithoutTryRowInput>
    deleteMany?: Enumerable<LetterScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutStatisticsInput = {
    create?: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatisticsInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedManyWithoutStatisticsInput = {
    create?: XOR<Enumerable<GameCreateWithoutStatisticsInput>, Enumerable<GameUncheckedCreateWithoutStatisticsInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutStatisticsInput>
    createMany?: GameCreateManyStatisticsInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutStatisticsInput = {
    create?: XOR<Enumerable<GameCreateWithoutStatisticsInput>, Enumerable<GameUncheckedCreateWithoutStatisticsInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutStatisticsInput>
    createMany?: GameCreateManyStatisticsInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutStatisticsInput = {
    create?: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatisticsInput
    upsert?: UserUpsertWithoutStatisticsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutStatisticsInput, UserUncheckedUpdateWithoutStatisticsInput>
  }

  export type GameUpdateManyWithoutStatisticsInput = {
    create?: XOR<Enumerable<GameCreateWithoutStatisticsInput>, Enumerable<GameUncheckedCreateWithoutStatisticsInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutStatisticsInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutStatisticsInput>
    createMany?: GameCreateManyStatisticsInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutStatisticsInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutStatisticsInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutStatisticsInput = {
    create?: XOR<Enumerable<GameCreateWithoutStatisticsInput>, Enumerable<GameUncheckedCreateWithoutStatisticsInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutStatisticsInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutStatisticsInput>
    createMany?: GameCreateManyStatisticsInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutStatisticsInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutStatisticsInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserSettingCreateWithoutUserInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    Language: LanguageCreateNestedOneWithoutUserSettingsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUncheckedCreateWithoutUserInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    languageId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingCreateOrConnectWithoutUserInput = {
    where: UserSettingWhereUniqueInput
    create: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput>
  }

  export type GameCreateWithoutUserInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    word: WordCreateNestedOneWithoutGameInput
    wordsBank: WordBankCreateNestedOneWithoutGameInput
    tryRows?: TryRowCreateNestedManyWithoutGameInput
    statistics?: StatisticCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    wordId: string
    wordsBankId: string
    tryRows?: TryRowUncheckedCreateNestedManyWithoutGameInput
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateOrConnectWithoutUserInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
  }

  export type GameCreateManyUserInputEnvelope = {
    data: Enumerable<GameCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type StatisticCreateWithoutUserInput = {
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    Game?: GameCreateNestedManyWithoutStatisticsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticUncheckedCreateWithoutUserInput = {
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    Game?: GameUncheckedCreateNestedManyWithoutStatisticsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticCreateOrConnectWithoutUserInput = {
    where: StatisticWhereUniqueInput
    create: XOR<StatisticCreateWithoutUserInput, StatisticUncheckedCreateWithoutUserInput>
  }

  export type StatisticCreateManyUserInputEnvelope = {
    data: Enumerable<StatisticCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserSettingUpsertWithoutUserInput = {
    update: XOR<UserSettingUpdateWithoutUserInput, UserSettingUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput>
  }

  export type UserSettingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUpdateOneRequiredWithoutUserSettingsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    languageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpsertWithWhereUniqueWithoutUserInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
    create: XOR<GameCreateWithoutUserInput, GameUncheckedCreateWithoutUserInput>
  }

  export type GameUpdateWithWhereUniqueWithoutUserInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutUserInput, GameUncheckedUpdateWithoutUserInput>
  }

  export type GameUpdateManyWithWhereWithoutUserInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGameInput>
  }

  export type GameScalarWhereInput = {
    AND?: Enumerable<GameScalarWhereInput>
    OR?: Enumerable<GameScalarWhereInput>
    NOT?: Enumerable<GameScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    tries?: IntFilter | number
    startedAt?: DateTimeFilter | Date | string
    finishedAt?: DateTimeNullableFilter | Date | string | null
    correct?: BoolFilter | boolean
    duration?: IntFilter | number
    userId?: StringFilter | string
    wordId?: StringFilter | string
    wordsBankId?: StringFilter | string
    statisticsId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type StatisticUpsertWithWhereUniqueWithoutUserInput = {
    where: StatisticWhereUniqueInput
    update: XOR<StatisticUpdateWithoutUserInput, StatisticUncheckedUpdateWithoutUserInput>
    create: XOR<StatisticCreateWithoutUserInput, StatisticUncheckedCreateWithoutUserInput>
  }

  export type StatisticUpdateWithWhereUniqueWithoutUserInput = {
    where: StatisticWhereUniqueInput
    data: XOR<StatisticUpdateWithoutUserInput, StatisticUncheckedUpdateWithoutUserInput>
  }

  export type StatisticUpdateManyWithWhereWithoutUserInput = {
    where: StatisticScalarWhereInput
    data: XOR<StatisticUpdateManyMutationInput, StatisticUncheckedUpdateManyWithoutStatisticsInput>
  }

  export type StatisticScalarWhereInput = {
    AND?: Enumerable<StatisticScalarWhereInput>
    OR?: Enumerable<StatisticScalarWhereInput>
    NOT?: Enumerable<StatisticScalarWhereInput>
    id?: StringFilter | string
    gamePlayed?: IntFilter | number
    gameWon?: IntFilter | number
    gameLost?: IntFilter | number
    streak?: IntFilter | number
    average?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LanguageCreateWithoutUserSettingsInput = {
    id?: string
    name: string
    code: string
    Word?: WordCreateNestedManyWithoutLanguageInput
    WordBank?: WordBankCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageUncheckedCreateWithoutUserSettingsInput = {
    id?: string
    name: string
    code: string
    Word?: WordUncheckedCreateNestedManyWithoutLanguageInput
    WordBank?: WordBankUncheckedCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageCreateOrConnectWithoutUserSettingsInput = {
    where: LanguageWhereUniqueInput
    create: XOR<LanguageCreateWithoutUserSettingsInput, LanguageUncheckedCreateWithoutUserSettingsInput>
  }

  export type UserCreateWithoutUserSettingInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    Game?: GameCreateNestedManyWithoutUserInput
    Statistics?: StatisticCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutUserSettingInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    Statistics?: StatisticUncheckedCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutUserSettingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSettingInput, UserUncheckedCreateWithoutUserSettingInput>
  }

  export type UserCreateManyUserSettingInputEnvelope = {
    data: Enumerable<UserCreateManyUserSettingInput>
    skipDuplicates?: boolean
  }

  export type LanguageUpsertWithoutUserSettingsInput = {
    update: XOR<LanguageUpdateWithoutUserSettingsInput, LanguageUncheckedUpdateWithoutUserSettingsInput>
    create: XOR<LanguageCreateWithoutUserSettingsInput, LanguageUncheckedCreateWithoutUserSettingsInput>
  }

  export type LanguageUpdateWithoutUserSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Word?: WordUpdateManyWithoutLanguageInput
    WordBank?: WordBankUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageUncheckedUpdateWithoutUserSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Word?: WordUncheckedUpdateManyWithoutLanguageInput
    WordBank?: WordBankUncheckedUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutUserSettingInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUserSettingInput, UserUncheckedUpdateWithoutUserSettingInput>
    create: XOR<UserCreateWithoutUserSettingInput, UserUncheckedCreateWithoutUserSettingInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUserSettingInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUserSettingInput, UserUncheckedUpdateWithoutUserSettingInput>
  }

  export type UserUpdateManyWithWhereWithoutUserSettingInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    name?: StringNullableFilter | string | null
    hashedPassword?: StringFilter | string
    salt?: StringFilter | string
    resetToken?: StringNullableFilter | string | null
    resetTokenExpiresAt?: DateTimeNullableFilter | Date | string | null
    roles?: StringFilter | string
    userSettingId?: StringFilter | string
    lastLogin?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserSettingCreateWithoutLanguageInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    User?: UserCreateNestedManyWithoutUserSettingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUncheckedCreateWithoutLanguageInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    User?: UserUncheckedCreateNestedManyWithoutUserSettingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingCreateOrConnectWithoutLanguageInput = {
    where: UserSettingWhereUniqueInput
    create: XOR<UserSettingCreateWithoutLanguageInput, UserSettingUncheckedCreateWithoutLanguageInput>
  }

  export type UserSettingCreateManyLanguageInputEnvelope = {
    data: Enumerable<UserSettingCreateManyLanguageInput>
    skipDuplicates?: boolean
  }

  export type WordCreateWithoutLanguageInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Game?: GameCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
    WordBank?: WordBankCreateNestedOneWithoutWordInput
  }

  export type WordUncheckedCreateWithoutLanguageInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Game?: GameUncheckedCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
    wordBankId?: string | null
  }

  export type WordCreateOrConnectWithoutLanguageInput = {
    where: WordWhereUniqueInput
    create: XOR<WordCreateWithoutLanguageInput, WordUncheckedCreateWithoutLanguageInput>
  }

  export type WordBankCreateWithoutLanguageInput = {
    id?: string
    name: string
    Word?: WordCreateNestedManyWithoutWordBankInput
    Game?: GameCreateNestedManyWithoutWordsBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankUncheckedCreateWithoutLanguageInput = {
    id?: string
    name: string
    Word?: WordUncheckedCreateNestedManyWithoutWordBankInput
    Game?: GameUncheckedCreateNestedManyWithoutWordsBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankCreateOrConnectWithoutLanguageInput = {
    where: WordBankWhereUniqueInput
    create: XOR<WordBankCreateWithoutLanguageInput, WordBankUncheckedCreateWithoutLanguageInput>
  }

  export type WordBankCreateManyLanguageInputEnvelope = {
    data: Enumerable<WordBankCreateManyLanguageInput>
    skipDuplicates?: boolean
  }

  export type UserSettingUpsertWithWhereUniqueWithoutLanguageInput = {
    where: UserSettingWhereUniqueInput
    update: XOR<UserSettingUpdateWithoutLanguageInput, UserSettingUncheckedUpdateWithoutLanguageInput>
    create: XOR<UserSettingCreateWithoutLanguageInput, UserSettingUncheckedCreateWithoutLanguageInput>
  }

  export type UserSettingUpdateWithWhereUniqueWithoutLanguageInput = {
    where: UserSettingWhereUniqueInput
    data: XOR<UserSettingUpdateWithoutLanguageInput, UserSettingUncheckedUpdateWithoutLanguageInput>
  }

  export type UserSettingUpdateManyWithWhereWithoutLanguageInput = {
    where: UserSettingScalarWhereInput
    data: XOR<UserSettingUpdateManyMutationInput, UserSettingUncheckedUpdateManyWithoutUserSettingsInput>
  }

  export type UserSettingScalarWhereInput = {
    AND?: Enumerable<UserSettingScalarWhereInput>
    OR?: Enumerable<UserSettingScalarWhereInput>
    NOT?: Enumerable<UserSettingScalarWhereInput>
    id?: StringFilter | string
    bio?: StringNullableFilter | string | null
    theme?: StringNullableFilter | string | null
    languageId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WordUpsertWithWhereUniqueWithoutLanguageInput = {
    where: WordWhereUniqueInput
    update: XOR<WordUpdateWithoutLanguageInput, WordUncheckedUpdateWithoutLanguageInput>
    create: XOR<WordCreateWithoutLanguageInput, WordUncheckedCreateWithoutLanguageInput>
  }

  export type WordUpdateWithWhereUniqueWithoutLanguageInput = {
    where: WordWhereUniqueInput
    data: XOR<WordUpdateWithoutLanguageInput, WordUncheckedUpdateWithoutLanguageInput>
  }

  export type WordUpdateManyWithWhereWithoutLanguageInput = {
    where: WordScalarWhereInput
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyWithoutWordInput>
  }

  export type WordScalarWhereInput = {
    AND?: Enumerable<WordScalarWhereInput>
    OR?: Enumerable<WordScalarWhereInput>
    NOT?: Enumerable<WordScalarWhereInput>
    id?: StringFilter | string
    word?: StringFilter | string
    definition?: StringNullableFilter | string | null
    example?: StringNullableFilter | string | null
    synonym?: StringNullableFilter | string | null
    size?: IntFilter | number
    source?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    wordBankId?: StringNullableFilter | string | null
  }

  export type WordBankUpsertWithWhereUniqueWithoutLanguageInput = {
    where: WordBankWhereUniqueInput
    update: XOR<WordBankUpdateWithoutLanguageInput, WordBankUncheckedUpdateWithoutLanguageInput>
    create: XOR<WordBankCreateWithoutLanguageInput, WordBankUncheckedCreateWithoutLanguageInput>
  }

  export type WordBankUpdateWithWhereUniqueWithoutLanguageInput = {
    where: WordBankWhereUniqueInput
    data: XOR<WordBankUpdateWithoutLanguageInput, WordBankUncheckedUpdateWithoutLanguageInput>
  }

  export type WordBankUpdateManyWithWhereWithoutLanguageInput = {
    where: WordBankScalarWhereInput
    data: XOR<WordBankUpdateManyMutationInput, WordBankUncheckedUpdateManyWithoutWordBankInput>
  }

  export type WordBankScalarWhereInput = {
    AND?: Enumerable<WordBankScalarWhereInput>
    OR?: Enumerable<WordBankScalarWhereInput>
    NOT?: Enumerable<WordBankScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    languageId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LanguageCreateWithoutWordInput = {
    id?: string
    name: string
    code: string
    UserSettings?: UserSettingCreateNestedManyWithoutLanguageInput
    WordBank?: WordBankCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageUncheckedCreateWithoutWordInput = {
    id?: string
    name: string
    code: string
    UserSettings?: UserSettingUncheckedCreateNestedManyWithoutLanguageInput
    WordBank?: WordBankUncheckedCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageCreateOrConnectWithoutWordInput = {
    where: LanguageWhereUniqueInput
    create: XOR<LanguageCreateWithoutWordInput, LanguageUncheckedCreateWithoutWordInput>
  }

  export type GameCreateWithoutWordInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    user: UserCreateNestedOneWithoutGameInput
    wordsBank: WordBankCreateNestedOneWithoutGameInput
    tryRows?: TryRowCreateNestedManyWithoutGameInput
    statistics?: StatisticCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUncheckedCreateWithoutWordInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordsBankId: string
    tryRows?: TryRowUncheckedCreateNestedManyWithoutGameInput
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateOrConnectWithoutWordInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutWordInput, GameUncheckedCreateWithoutWordInput>
  }

  export type GameCreateManyWordInputEnvelope = {
    data: Enumerable<GameCreateManyWordInput>
    skipDuplicates?: boolean
  }

  export type WordBankCreateWithoutWordInput = {
    id?: string
    name: string
    Language: LanguageCreateNestedOneWithoutWordBankInput
    Game?: GameCreateNestedManyWithoutWordsBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankUncheckedCreateWithoutWordInput = {
    id?: string
    name: string
    languageId: string
    Game?: GameUncheckedCreateNestedManyWithoutWordsBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankCreateOrConnectWithoutWordInput = {
    where: WordBankWhereUniqueInput
    create: XOR<WordBankCreateWithoutWordInput, WordBankUncheckedCreateWithoutWordInput>
  }

  export type LanguageUpsertWithWhereUniqueWithoutWordInput = {
    where: LanguageWhereUniqueInput
    update: XOR<LanguageUpdateWithoutWordInput, LanguageUncheckedUpdateWithoutWordInput>
    create: XOR<LanguageCreateWithoutWordInput, LanguageUncheckedCreateWithoutWordInput>
  }

  export type LanguageUpdateWithWhereUniqueWithoutWordInput = {
    where: LanguageWhereUniqueInput
    data: XOR<LanguageUpdateWithoutWordInput, LanguageUncheckedUpdateWithoutWordInput>
  }

  export type LanguageUpdateManyWithWhereWithoutWordInput = {
    where: LanguageScalarWhereInput
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyWithoutLanguageInput>
  }

  export type LanguageScalarWhereInput = {
    AND?: Enumerable<LanguageScalarWhereInput>
    OR?: Enumerable<LanguageScalarWhereInput>
    NOT?: Enumerable<LanguageScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    code?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GameUpsertWithWhereUniqueWithoutWordInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutWordInput, GameUncheckedUpdateWithoutWordInput>
    create: XOR<GameCreateWithoutWordInput, GameUncheckedCreateWithoutWordInput>
  }

  export type GameUpdateWithWhereUniqueWithoutWordInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutWordInput, GameUncheckedUpdateWithoutWordInput>
  }

  export type GameUpdateManyWithWhereWithoutWordInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGameInput>
  }

  export type WordBankUpsertWithoutWordInput = {
    update: XOR<WordBankUpdateWithoutWordInput, WordBankUncheckedUpdateWithoutWordInput>
    create: XOR<WordBankCreateWithoutWordInput, WordBankUncheckedCreateWithoutWordInput>
  }

  export type WordBankUpdateWithoutWordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Language?: LanguageUpdateOneRequiredWithoutWordBankInput
    Game?: GameUpdateManyWithoutWordsBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordBankUncheckedUpdateWithoutWordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    languageId?: StringFieldUpdateOperationsInput | string
    Game?: GameUncheckedUpdateManyWithoutWordsBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageCreateWithoutWordBankInput = {
    id?: string
    name: string
    code: string
    UserSettings?: UserSettingCreateNestedManyWithoutLanguageInput
    Word?: WordCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageUncheckedCreateWithoutWordBankInput = {
    id?: string
    name: string
    code: string
    UserSettings?: UserSettingUncheckedCreateNestedManyWithoutLanguageInput
    Word?: WordUncheckedCreateNestedManyWithoutLanguageInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageCreateOrConnectWithoutWordBankInput = {
    where: LanguageWhereUniqueInput
    create: XOR<LanguageCreateWithoutWordBankInput, LanguageUncheckedCreateWithoutWordBankInput>
  }

  export type WordCreateWithoutWordBankInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Language?: LanguageCreateNestedManyWithoutWordInput
    Game?: GameCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordUncheckedCreateWithoutWordBankInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Language?: LanguageUncheckedCreateNestedManyWithoutWordInput
    Game?: GameUncheckedCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordCreateOrConnectWithoutWordBankInput = {
    where: WordWhereUniqueInput
    create: XOR<WordCreateWithoutWordBankInput, WordUncheckedCreateWithoutWordBankInput>
  }

  export type WordCreateManyWordBankInputEnvelope = {
    data: Enumerable<WordCreateManyWordBankInput>
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutWordsBankInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    user: UserCreateNestedOneWithoutGameInput
    word: WordCreateNestedOneWithoutGameInput
    tryRows?: TryRowCreateNestedManyWithoutGameInput
    statistics?: StatisticCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUncheckedCreateWithoutWordsBankInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    tryRows?: TryRowUncheckedCreateNestedManyWithoutGameInput
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateOrConnectWithoutWordsBankInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutWordsBankInput, GameUncheckedCreateWithoutWordsBankInput>
  }

  export type GameCreateManyWordsBankInputEnvelope = {
    data: Enumerable<GameCreateManyWordsBankInput>
    skipDuplicates?: boolean
  }

  export type LanguageUpsertWithoutWordBankInput = {
    update: XOR<LanguageUpdateWithoutWordBankInput, LanguageUncheckedUpdateWithoutWordBankInput>
    create: XOR<LanguageCreateWithoutWordBankInput, LanguageUncheckedCreateWithoutWordBankInput>
  }

  export type LanguageUpdateWithoutWordBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    UserSettings?: UserSettingUpdateManyWithoutLanguageInput
    Word?: WordUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageUncheckedUpdateWithoutWordBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    UserSettings?: UserSettingUncheckedUpdateManyWithoutLanguageInput
    Word?: WordUncheckedUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordUpsertWithWhereUniqueWithoutWordBankInput = {
    where: WordWhereUniqueInput
    update: XOR<WordUpdateWithoutWordBankInput, WordUncheckedUpdateWithoutWordBankInput>
    create: XOR<WordCreateWithoutWordBankInput, WordUncheckedCreateWithoutWordBankInput>
  }

  export type WordUpdateWithWhereUniqueWithoutWordBankInput = {
    where: WordWhereUniqueInput
    data: XOR<WordUpdateWithoutWordBankInput, WordUncheckedUpdateWithoutWordBankInput>
  }

  export type WordUpdateManyWithWhereWithoutWordBankInput = {
    where: WordScalarWhereInput
    data: XOR<WordUpdateManyMutationInput, WordUncheckedUpdateManyWithoutWordInput>
  }

  export type GameUpsertWithWhereUniqueWithoutWordsBankInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutWordsBankInput, GameUncheckedUpdateWithoutWordsBankInput>
    create: XOR<GameCreateWithoutWordsBankInput, GameUncheckedCreateWithoutWordsBankInput>
  }

  export type GameUpdateWithWhereUniqueWithoutWordsBankInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutWordsBankInput, GameUncheckedUpdateWithoutWordsBankInput>
  }

  export type GameUpdateManyWithWhereWithoutWordsBankInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGameInput>
  }

  export type UserCreateWithoutGameInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    userSetting: UserSettingCreateNestedOneWithoutUserInput
    Statistics?: StatisticCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutGameInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    userSettingId: string
    Statistics?: StatisticUncheckedCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutGameInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
  }

  export type WordCreateWithoutGameInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Language?: LanguageCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
    WordBank?: WordBankCreateNestedOneWithoutWordInput
  }

  export type WordUncheckedCreateWithoutGameInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    Language?: LanguageUncheckedCreateNestedManyWithoutWordInput
    createdAt?: Date | string
    updatedAt?: Date | string
    wordBankId?: string | null
  }

  export type WordCreateOrConnectWithoutGameInput = {
    where: WordWhereUniqueInput
    create: XOR<WordCreateWithoutGameInput, WordUncheckedCreateWithoutGameInput>
  }

  export type WordBankCreateWithoutGameInput = {
    id?: string
    name: string
    Language: LanguageCreateNestedOneWithoutWordBankInput
    Word?: WordCreateNestedManyWithoutWordBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankUncheckedCreateWithoutGameInput = {
    id?: string
    name: string
    languageId: string
    Word?: WordUncheckedCreateNestedManyWithoutWordBankInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankCreateOrConnectWithoutGameInput = {
    where: WordBankWhereUniqueInput
    create: XOR<WordBankCreateWithoutGameInput, WordBankUncheckedCreateWithoutGameInput>
  }

  export type TryRowCreateWithoutGameInput = {
    id?: string
    tries?: number
    rowSize?: number
    correct: boolean
    letters?: LetterCreateNestedManyWithoutTryRowInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowUncheckedCreateWithoutGameInput = {
    id?: string
    tries?: number
    rowSize?: number
    correct: boolean
    letters?: LetterUncheckedCreateNestedManyWithoutTryRowInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowCreateOrConnectWithoutGameInput = {
    where: TryRowWhereUniqueInput
    create: XOR<TryRowCreateWithoutGameInput, TryRowUncheckedCreateWithoutGameInput>
  }

  export type TryRowCreateManyGameInputEnvelope = {
    data: Enumerable<TryRowCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type StatisticCreateWithoutGameInput = {
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    user?: UserCreateNestedOneWithoutStatisticsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticUncheckedCreateWithoutGameInput = {
    id?: string
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticCreateOrConnectWithoutGameInput = {
    where: StatisticWhereUniqueInput
    create: XOR<StatisticCreateWithoutGameInput, StatisticUncheckedCreateWithoutGameInput>
  }

  export type UserUpsertWithoutGameInput = {
    update: XOR<UserUpdateWithoutGameInput, UserUncheckedUpdateWithoutGameInput>
    create: XOR<UserCreateWithoutGameInput, UserUncheckedCreateWithoutGameInput>
  }

  export type UserUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    userSetting?: UserSettingUpdateOneRequiredWithoutUserInput
    Statistics?: StatisticUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    userSettingId?: StringFieldUpdateOperationsInput | string
    Statistics?: StatisticUncheckedUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordUpsertWithoutGameInput = {
    update: XOR<WordUpdateWithoutGameInput, WordUncheckedUpdateWithoutGameInput>
    create: XOR<WordCreateWithoutGameInput, WordUncheckedCreateWithoutGameInput>
  }

  export type WordUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WordBank?: WordBankUpdateOneWithoutWordInput
  }

  export type WordUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUncheckedUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wordBankId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordBankUpsertWithoutGameInput = {
    update: XOR<WordBankUpdateWithoutGameInput, WordBankUncheckedUpdateWithoutGameInput>
    create: XOR<WordBankCreateWithoutGameInput, WordBankUncheckedCreateWithoutGameInput>
  }

  export type WordBankUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Language?: LanguageUpdateOneRequiredWithoutWordBankInput
    Word?: WordUpdateManyWithoutWordBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordBankUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    languageId?: StringFieldUpdateOperationsInput | string
    Word?: WordUncheckedUpdateManyWithoutWordBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowUpsertWithWhereUniqueWithoutGameInput = {
    where: TryRowWhereUniqueInput
    update: XOR<TryRowUpdateWithoutGameInput, TryRowUncheckedUpdateWithoutGameInput>
    create: XOR<TryRowCreateWithoutGameInput, TryRowUncheckedCreateWithoutGameInput>
  }

  export type TryRowUpdateWithWhereUniqueWithoutGameInput = {
    where: TryRowWhereUniqueInput
    data: XOR<TryRowUpdateWithoutGameInput, TryRowUncheckedUpdateWithoutGameInput>
  }

  export type TryRowUpdateManyWithWhereWithoutGameInput = {
    where: TryRowScalarWhereInput
    data: XOR<TryRowUpdateManyMutationInput, TryRowUncheckedUpdateManyWithoutTryRowsInput>
  }

  export type TryRowScalarWhereInput = {
    AND?: Enumerable<TryRowScalarWhereInput>
    OR?: Enumerable<TryRowScalarWhereInput>
    NOT?: Enumerable<TryRowScalarWhereInput>
    id?: StringFilter | string
    gameId?: StringFilter | string
    tries?: IntFilter | number
    rowSize?: IntFilter | number
    correct?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type StatisticUpsertWithoutGameInput = {
    update: XOR<StatisticUpdateWithoutGameInput, StatisticUncheckedUpdateWithoutGameInput>
    create: XOR<StatisticCreateWithoutGameInput, StatisticUncheckedCreateWithoutGameInput>
  }

  export type StatisticUpdateWithoutGameInput = {
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutStatisticsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowCreateWithoutLettersInput = {
    id?: string
    game: GameCreateNestedOneWithoutTryRowsInput
    tries?: number
    rowSize?: number
    correct: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowUncheckedCreateWithoutLettersInput = {
    id?: string
    gameId: string
    tries?: number
    rowSize?: number
    correct: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowCreateOrConnectWithoutLettersInput = {
    where: TryRowWhereUniqueInput
    create: XOR<TryRowCreateWithoutLettersInput, TryRowUncheckedCreateWithoutLettersInput>
  }

  export type TryRowUpsertWithoutLettersInput = {
    update: XOR<TryRowUpdateWithoutLettersInput, TryRowUncheckedUpdateWithoutLettersInput>
    create: XOR<TryRowCreateWithoutLettersInput, TryRowUncheckedCreateWithoutLettersInput>
  }

  export type TryRowUpdateWithoutLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    game?: GameUpdateOneRequiredWithoutTryRowsInput
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowUncheckedUpdateWithoutLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateWithoutTryRowsInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    user: UserCreateNestedOneWithoutGameInput
    word: WordCreateNestedOneWithoutGameInput
    wordsBank: WordBankCreateNestedOneWithoutGameInput
    statistics?: StatisticCreateNestedOneWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUncheckedCreateWithoutTryRowsInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    wordsBankId: string
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateOrConnectWithoutTryRowsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTryRowsInput, GameUncheckedCreateWithoutTryRowsInput>
  }

  export type LetterCreateWithoutTryRowInput = {
    id?: string
    letter: string
    createdAt: Date | string
    modifiedAt: Date | string
  }

  export type LetterUncheckedCreateWithoutTryRowInput = {
    id?: string
    letter: string
    createdAt: Date | string
    modifiedAt: Date | string
  }

  export type LetterCreateOrConnectWithoutTryRowInput = {
    where: LetterWhereUniqueInput
    create: XOR<LetterCreateWithoutTryRowInput, LetterUncheckedCreateWithoutTryRowInput>
  }

  export type LetterCreateManyTryRowInputEnvelope = {
    data: Enumerable<LetterCreateManyTryRowInput>
    skipDuplicates?: boolean
  }

  export type GameUpsertWithoutTryRowsInput = {
    update: XOR<GameUpdateWithoutTryRowsInput, GameUncheckedUpdateWithoutTryRowsInput>
    create: XOR<GameCreateWithoutTryRowsInput, GameUncheckedCreateWithoutTryRowsInput>
  }

  export type GameUpdateWithoutTryRowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutGameInput
    word?: WordUpdateOneRequiredWithoutGameInput
    wordsBank?: WordBankUpdateOneRequiredWithoutGameInput
    statistics?: StatisticUpdateOneWithoutGameInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateWithoutTryRowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    wordId?: StringFieldUpdateOperationsInput | string
    wordsBankId?: StringFieldUpdateOperationsInput | string
    statisticsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUpsertWithWhereUniqueWithoutTryRowInput = {
    where: LetterWhereUniqueInput
    update: XOR<LetterUpdateWithoutTryRowInput, LetterUncheckedUpdateWithoutTryRowInput>
    create: XOR<LetterCreateWithoutTryRowInput, LetterUncheckedCreateWithoutTryRowInput>
  }

  export type LetterUpdateWithWhereUniqueWithoutTryRowInput = {
    where: LetterWhereUniqueInput
    data: XOR<LetterUpdateWithoutTryRowInput, LetterUncheckedUpdateWithoutTryRowInput>
  }

  export type LetterUpdateManyWithWhereWithoutTryRowInput = {
    where: LetterScalarWhereInput
    data: XOR<LetterUpdateManyMutationInput, LetterUncheckedUpdateManyWithoutLettersInput>
  }

  export type LetterScalarWhereInput = {
    AND?: Enumerable<LetterScalarWhereInput>
    OR?: Enumerable<LetterScalarWhereInput>
    NOT?: Enumerable<LetterScalarWhereInput>
    id?: StringFilter | string
    letter?: StringFilter | string
    tryRowId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    modifiedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutStatisticsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    userSetting: UserSettingCreateNestedOneWithoutUserInput
    Game?: GameCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutStatisticsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    userSettingId: string
    Game?: GameUncheckedCreateNestedManyWithoutUserInput
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutStatisticsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
  }

  export type GameCreateWithoutStatisticsInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    user: UserCreateNestedOneWithoutGameInput
    word: WordCreateNestedOneWithoutGameInput
    wordsBank: WordBankCreateNestedOneWithoutGameInput
    tryRows?: TryRowCreateNestedManyWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUncheckedCreateWithoutStatisticsInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    wordsBankId: string
    tryRows?: TryRowUncheckedCreateNestedManyWithoutGameInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateOrConnectWithoutStatisticsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutStatisticsInput, GameUncheckedCreateWithoutStatisticsInput>
  }

  export type GameCreateManyStatisticsInputEnvelope = {
    data: Enumerable<GameCreateManyStatisticsInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStatisticsInput = {
    update: XOR<UserUpdateWithoutStatisticsInput, UserUncheckedUpdateWithoutStatisticsInput>
    create: XOR<UserCreateWithoutStatisticsInput, UserUncheckedCreateWithoutStatisticsInput>
  }

  export type UserUpdateWithoutStatisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    userSetting?: UserSettingUpdateOneRequiredWithoutUserInput
    Game?: GameUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutStatisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    userSettingId?: StringFieldUpdateOperationsInput | string
    Game?: GameUncheckedUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpsertWithWhereUniqueWithoutStatisticsInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutStatisticsInput, GameUncheckedUpdateWithoutStatisticsInput>
    create: XOR<GameCreateWithoutStatisticsInput, GameUncheckedCreateWithoutStatisticsInput>
  }

  export type GameUpdateWithWhereUniqueWithoutStatisticsInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutStatisticsInput, GameUncheckedUpdateWithoutStatisticsInput>
  }

  export type GameUpdateManyWithWhereWithoutStatisticsInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGameInput>
  }

  export type GameCreateManyUserInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    wordId: string
    wordsBankId: string
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StatisticCreateManyUserInput = {
    gamePlayed?: number
    gameWon?: number
    gameLost?: number
    streak?: number
    average?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    word?: WordUpdateOneRequiredWithoutGameInput
    wordsBank?: WordBankUpdateOneRequiredWithoutGameInput
    tryRows?: TryRowUpdateManyWithoutGameInput
    statistics?: StatisticUpdateOneWithoutGameInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    wordId?: StringFieldUpdateOperationsInput | string
    wordsBankId?: StringFieldUpdateOperationsInput | string
    tryRows?: TryRowUncheckedUpdateManyWithoutGameInput
    statisticsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    wordId?: StringFieldUpdateOperationsInput | string
    wordsBankId?: StringFieldUpdateOperationsInput | string
    statisticsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticUpdateWithoutUserInput = {
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    Game?: GameUpdateManyWithoutStatisticsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticUncheckedUpdateWithoutUserInput = {
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    Game?: GameUncheckedUpdateManyWithoutStatisticsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticUncheckedUpdateManyWithoutStatisticsInput = {
    gamePlayed?: IntFieldUpdateOperationsInput | number
    gameWon?: IntFieldUpdateOperationsInput | number
    gameLost?: IntFieldUpdateOperationsInput | number
    streak?: IntFieldUpdateOperationsInput | number
    average?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyUserSettingInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    hashedPassword: string
    salt: string
    resetToken?: string | null
    resetTokenExpiresAt?: Date | string | null
    roles?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutUserSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    Game?: GameUpdateManyWithoutUserInput
    Statistics?: StatisticUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutUserSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    Game?: GameUncheckedUpdateManyWithoutUserInput
    Statistics?: StatisticUncheckedUpdateManyWithoutUserInput
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingCreateManyLanguageInput = {
    id?: string
    bio?: string | null
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordBankCreateManyLanguageInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUpdateWithoutLanguageInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateManyWithoutUserSettingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateWithoutLanguageInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUncheckedUpdateManyWithoutUserSettingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateManyWithoutUserSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordUpdateWithoutLanguageInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Game?: GameUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WordBank?: WordBankUpdateOneWithoutWordInput
  }

  export type WordUncheckedUpdateWithoutLanguageInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Game?: GameUncheckedUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wordBankId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordUncheckedUpdateManyWithoutWordInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wordBankId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WordBankUpdateWithoutLanguageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Word?: WordUpdateManyWithoutWordBankInput
    Game?: GameUpdateManyWithoutWordsBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordBankUncheckedUpdateWithoutLanguageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Word?: WordUncheckedUpdateManyWithoutWordBankInput
    Game?: GameUncheckedUpdateManyWithoutWordsBankInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordBankUncheckedUpdateManyWithoutWordBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateManyWordInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordsBankId: string
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageUpdateWithoutWordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    UserSettings?: UserSettingUpdateManyWithoutLanguageInput
    WordBank?: WordBankUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageUncheckedUpdateWithoutWordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    UserSettings?: UserSettingUncheckedUpdateManyWithoutLanguageInput
    WordBank?: WordBankUncheckedUpdateManyWithoutLanguageInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageUncheckedUpdateManyWithoutLanguageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutWordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutGameInput
    wordsBank?: WordBankUpdateOneRequiredWithoutGameInput
    tryRows?: TryRowUpdateManyWithoutGameInput
    statistics?: StatisticUpdateOneWithoutGameInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateWithoutWordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    wordsBankId?: StringFieldUpdateOperationsInput | string
    tryRows?: TryRowUncheckedUpdateManyWithoutGameInput
    statisticsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordCreateManyWordBankInput = {
    id?: string
    word: string
    definition?: string | null
    example?: string | null
    synonym?: string | null
    size: number
    source?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateManyWordsBankInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    statisticsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WordUpdateWithoutWordBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUpdateManyWithoutWordInput
    Game?: GameUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WordUncheckedUpdateWithoutWordBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    example?: NullableStringFieldUpdateOperationsInput | string | null
    synonym?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    source?: NullableStringFieldUpdateOperationsInput | string | null
    Language?: LanguageUncheckedUpdateManyWithoutWordInput
    Game?: GameUncheckedUpdateManyWithoutWordInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutWordsBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutGameInput
    word?: WordUpdateOneRequiredWithoutGameInput
    tryRows?: TryRowUpdateManyWithoutGameInput
    statistics?: StatisticUpdateOneWithoutGameInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateWithoutWordsBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    wordId?: StringFieldUpdateOperationsInput | string
    tryRows?: TryRowUncheckedUpdateManyWithoutGameInput
    statisticsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowCreateManyGameInput = {
    id?: string
    tries?: number
    rowSize?: number
    correct: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TryRowUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    letters?: LetterUpdateManyWithoutTryRowInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    letters?: LetterUncheckedUpdateManyWithoutTryRowInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TryRowUncheckedUpdateManyWithoutTryRowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    rowSize?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterCreateManyTryRowInput = {
    id?: string
    letter: string
    createdAt: Date | string
    modifiedAt: Date | string
  }

  export type LetterUpdateWithoutTryRowInput = {
    id?: StringFieldUpdateOperationsInput | string
    letter?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUncheckedUpdateWithoutTryRowInput = {
    id?: StringFieldUpdateOperationsInput | string
    letter?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUncheckedUpdateManyWithoutLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    letter?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateManyStatisticsInput = {
    id?: string
    name: string
    tries?: number
    startedAt: Date | string
    finishedAt?: Date | string | null
    correct: boolean
    duration: number
    userId: string
    wordId: string
    wordsBankId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateWithoutStatisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutGameInput
    word?: WordUpdateOneRequiredWithoutGameInput
    wordsBank?: WordBankUpdateOneRequiredWithoutGameInput
    tryRows?: TryRowUpdateManyWithoutGameInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateWithoutStatisticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tries?: IntFieldUpdateOperationsInput | number
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correct?: BoolFieldUpdateOperationsInput | boolean
    duration?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    wordId?: StringFieldUpdateOperationsInput | string
    wordsBankId?: StringFieldUpdateOperationsInput | string
    tryRows?: TryRowUncheckedUpdateManyWithoutGameInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}